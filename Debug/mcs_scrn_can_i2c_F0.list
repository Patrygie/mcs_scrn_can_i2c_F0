
mcs_scrn_can_i2c_F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e8  080054e8  00020130  2**0
                  CONTENTS
  4 .ARM          00000000  080054e8  080054e8  00020130  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054e8  080054e8  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  080054f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000130  08005620  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005620  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136ac  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7c  00000000  00000000  00033804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00036380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  00037518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001989c  00000000  00000000  00038578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015eb1  00000000  00000000  00051e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f30  00000000  00000000  00067cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9bf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e9c  00000000  00000000  000f9c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000130 	.word	0x20000130
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005498 	.word	0x08005498

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000134 	.word	0x20000134
 8000104:	08005498 	.word	0x08005498

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_CAN_Init+0x68>)
 8000226:	4a19      	ldr	r2, [pc, #100]	; (800028c <MX_CAN_Init+0x6c>)
 8000228:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_CAN_Init+0x68>)
 800022c:	2202      	movs	r2, #2
 800022e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <MX_CAN_Init+0x68>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000236:	4b14      	ldr	r3, [pc, #80]	; (8000288 <MX_CAN_Init+0x68>)
 8000238:	2200      	movs	r2, #0
 800023a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800023c:	4b12      	ldr	r3, [pc, #72]	; (8000288 <MX_CAN_Init+0x68>)
 800023e:	22c0      	movs	r2, #192	; 0xc0
 8000240:	0312      	lsls	r2, r2, #12
 8000242:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <MX_CAN_Init+0x68>)
 8000246:	2280      	movs	r2, #128	; 0x80
 8000248:	0352      	lsls	r2, r2, #13
 800024a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024c:	4b0e      	ldr	r3, [pc, #56]	; (8000288 <MX_CAN_Init+0x68>)
 800024e:	2200      	movs	r2, #0
 8000250:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000252:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <MX_CAN_Init+0x68>)
 8000254:	2200      	movs	r2, #0
 8000256:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <MX_CAN_Init+0x68>)
 800025a:	2200      	movs	r2, #0
 800025c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800025e:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <MX_CAN_Init+0x68>)
 8000260:	2200      	movs	r2, #0
 8000262:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000264:	4b08      	ldr	r3, [pc, #32]	; (8000288 <MX_CAN_Init+0x68>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800026a:	4b07      	ldr	r3, [pc, #28]	; (8000288 <MX_CAN_Init+0x68>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <MX_CAN_Init+0x68>)
 8000272:	0018      	movs	r0, r3
 8000274:	f000 ff8e 	bl	8001194 <HAL_CAN_Init>
 8000278:	1e03      	subs	r3, r0, #0
 800027a:	d001      	beq.n	8000280 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800027c:	f000 fda1 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	2000014c 	.word	0x2000014c
 800028c:	40006400 	.word	0x40006400

08000290 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000290:	b590      	push	{r4, r7, lr}
 8000292:	b08b      	sub	sp, #44	; 0x2c
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000298:	2414      	movs	r4, #20
 800029a:	193b      	adds	r3, r7, r4
 800029c:	0018      	movs	r0, r3
 800029e:	2314      	movs	r3, #20
 80002a0:	001a      	movs	r2, r3
 80002a2:	2100      	movs	r1, #0
 80002a4:	f005 f8f0 	bl	8005488 <memset>
  if(canHandle->Instance==CAN)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a20      	ldr	r2, [pc, #128]	; (8000330 <HAL_CAN_MspInit+0xa0>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13a      	bne.n	8000328 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* CAN clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002b2:	4b20      	ldr	r3, [pc, #128]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002b4:	69da      	ldr	r2, [r3, #28]
 80002b6:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002b8:	2180      	movs	r1, #128	; 0x80
 80002ba:	0489      	lsls	r1, r1, #18
 80002bc:	430a      	orrs	r2, r1
 80002be:	61da      	str	r2, [r3, #28]
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002c2:	69da      	ldr	r2, [r3, #28]
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	049b      	lsls	r3, r3, #18
 80002c8:	4013      	ands	r3, r2
 80002ca:	613b      	str	r3, [r7, #16]
 80002cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ce:	4b19      	ldr	r3, [pc, #100]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002d0:	695a      	ldr	r2, [r3, #20]
 80002d2:	4b18      	ldr	r3, [pc, #96]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	02c9      	lsls	r1, r1, #11
 80002d8:	430a      	orrs	r2, r1
 80002da:	615a      	str	r2, [r3, #20]
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <HAL_CAN_MspInit+0xa4>)
 80002de:	695a      	ldr	r2, [r3, #20]
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	02db      	lsls	r3, r3, #11
 80002e4:	4013      	ands	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
 80002e8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	22c0      	movs	r2, #192	; 0xc0
 80002ee:	0092      	lsls	r2, r2, #2
 80002f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002f2:	0021      	movs	r1, r4
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2202      	movs	r2, #2
 80002f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000300:	187b      	adds	r3, r7, r1
 8000302:	2203      	movs	r2, #3
 8000304:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2204      	movs	r2, #4
 800030a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800030c:	187b      	adds	r3, r7, r1
 800030e:	4a0a      	ldr	r2, [pc, #40]	; (8000338 <HAL_CAN_MspInit+0xa8>)
 8000310:	0019      	movs	r1, r3
 8000312:	0010      	movs	r0, r2
 8000314:	f001 fedc 	bl	80020d0 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	2100      	movs	r1, #0
 800031c:	201e      	movs	r0, #30
 800031e:	f001 fe53 	bl	8001fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000322:	201e      	movs	r0, #30
 8000324:	f001 fe65 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b00b      	add	sp, #44	; 0x2c
 800032e:	bd90      	pop	{r4, r7, pc}
 8000330:	40006400 	.word	0x40006400
 8000334:	40021000 	.word	0x40021000
 8000338:	48000400 	.word	0x48000400

0800033c <CAN_Init>:
          Filter configured in accordance with E&S Team Project Guidlines.
 *
 * @retval None.
 **/
void CAN_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	sFilterConfig.FilterBank = 1;
 8000340:	4b27      	ldr	r3, [pc, #156]	; (80003e0 <CAN_Init+0xa4>)
 8000342:	2201      	movs	r2, #1
 8000344:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <CAN_Init+0xa4>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800034c:	4b24      	ldr	r3, [pc, #144]	; (80003e0 <CAN_Init+0xa4>)
 800034e:	2201      	movs	r2, #1
 8000350:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = Rx_ID << 5;
 8000352:	4b23      	ldr	r3, [pc, #140]	; (80003e0 <CAN_Init+0xa4>)
 8000354:	2294      	movs	r2, #148	; 0x94
 8000356:	0112      	lsls	r2, r2, #4
 8000358:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800035a:	4b21      	ldr	r3, [pc, #132]	; (80003e0 <CAN_Init+0xa4>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF << 5;
 8000360:	4b1f      	ldr	r3, [pc, #124]	; (80003e0 <CAN_Init+0xa4>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <CAN_Init+0xa8>)
 8000364:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000366:	4b1e      	ldr	r3, [pc, #120]	; (80003e0 <CAN_Init+0xa4>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800036c:	4b1c      	ldr	r3, [pc, #112]	; (80003e0 <CAN_Init+0xa4>)
 800036e:	2200      	movs	r2, #0
 8000370:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8000372:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <CAN_Init+0xa4>)
 8000374:	2201      	movs	r2, #1
 8000376:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8000378:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <CAN_Init+0xa4>)
 800037a:	220e      	movs	r2, #14
 800037c:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 800037e:	4a18      	ldr	r2, [pc, #96]	; (80003e0 <CAN_Init+0xa4>)
 8000380:	4b19      	ldr	r3, [pc, #100]	; (80003e8 <CAN_Init+0xac>)
 8000382:	0011      	movs	r1, r2
 8000384:	0018      	movs	r0, r3
 8000386:	f001 f803 	bl	8001390 <HAL_CAN_ConfigFilter>
 800038a:	1e03      	subs	r3, r0, #0
 800038c:	d001      	beq.n	8000392 <CAN_Init+0x56>
	{
		/* Filter configuration Error */
		Error_Handler();
 800038e:	f000 fd18 	bl	8000dc2 <Error_Handler>
	}
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <CAN_Init+0xac>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 f8ed 	bl	8001574 <HAL_CAN_Start>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <CAN_Init+0x66>
	{
		/* Start Error */
		Error_Handler();
 800039e:	f000 fd10 	bl	8000dc2 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <CAN_Init+0xac>)
 80003a4:	2103      	movs	r1, #3
 80003a6:	0018      	movs	r0, r3
 80003a8:	f001 fb24 	bl	80019f4 <HAL_CAN_ActivateNotification>
 80003ac:	1e03      	subs	r3, r0, #0
 80003ae:	d001      	beq.n	80003b4 <CAN_Init+0x78>
	{
		/* Notification Error */
		Error_Handler();
 80003b0:	f000 fd07 	bl	8000dc2 <Error_Handler>
	}

	TxHeader.StdId = Tx_ID;
 80003b4:	4b0d      	ldr	r3, [pc, #52]	; (80003ec <CAN_Init+0xb0>)
 80003b6:	224f      	movs	r2, #79	; 0x4f
 80003b8:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <CAN_Init+0xb0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA;
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <CAN_Init+0xb0>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <CAN_Init+0xb0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <CAN_Init+0xb0>)
 80003ce:	2208      	movs	r2, #8
 80003d0:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = DISABLE;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <CAN_Init+0xb0>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	751a      	strb	r2, [r3, #20]
}
 80003d8:	46c0      	nop			; (mov r8, r8)
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	46c0      	nop			; (mov r8, r8)
 80003e0:	20000174 	.word	0x20000174
 80003e4:	001fffe0 	.word	0x001fffe0
 80003e8:	2000014c 	.word	0x2000014c
 80003ec:	2000019c 	.word	0x2000019c

080003f0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 *         the configuration information for the specified CAN.
 *
 * @retval None 
 **/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
	CAN_Receive(hcan, &RxHeader, RxData);
 80003f8:	4a06      	ldr	r2, [pc, #24]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 80003fa:	4907      	ldr	r1, [pc, #28]	; (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	0018      	movs	r0, r3
 8000400:	f000 f81d 	bl	800043e <CAN_Receive>
	CAN_On_Receive(RxData);
 8000404:	4b03      	ldr	r3, [pc, #12]	; (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000406:	0018      	movs	r0, r3
 8000408:	f000 f808 	bl	800041c <CAN_On_Receive>
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	b002      	add	sp, #8
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200001d8 	.word	0x200001d8
 8000418:	200001b4 	.word	0x200001b4

0800041c <CAN_On_Receive>:
 * @param RxData pointer to uint8_t array which stores received data
 * 
 * @retval None
 **/
void CAN_On_Receive(uint8_t *RxData)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	if(Read_RequestMessage == RxData[ReadMessage])
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2b3d      	cmp	r3, #61	; 0x3d
 800042a:	d102      	bne.n	8000432 <CAN_On_Receive+0x16>
	{
		CAN_Respond();
 800042c:	f000 f83a 	bl	80004a4 <CAN_Respond>
	}
	else
	{
		CAN_ProcessWriteCommand();
	}
}
 8000430:	e001      	b.n	8000436 <CAN_On_Receive+0x1a>
		CAN_ProcessWriteCommand();
 8000432:	f000 f85d 	bl	80004f0 <CAN_ProcessWriteCommand>
}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}

0800043e <CAN_Receive>:
 * @param RxData uint8_t pointer to array that will contain received data.
 * 
 * @retval None.
 **/
void CAN_Receive(CAN_HandleTypeDef *CANPointer, CAN_RxHeaderTypeDef *RxHeader, uint8_t *RxData)
{
 800043e:	b580      	push	{r7, lr}
 8000440:	b084      	sub	sp, #16
 8000442:	af00      	add	r7, sp, #0
 8000444:	60f8      	str	r0, [r7, #12]
 8000446:	60b9      	str	r1, [r7, #8]
 8000448:	607a      	str	r2, [r7, #4]
	if(HAL_CAN_GetRxMessage(CANPointer, CAN_RX_FIFO0, RxHeader, RxData) != HAL_OK)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	68f8      	ldr	r0, [r7, #12]
 8000450:	2100      	movs	r1, #0
 8000452:	f001 f9b3 	bl	80017bc <HAL_CAN_GetRxMessage>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <CAN_Receive+0x20>
	{
		CANBUS_Error_Handler();
 800045a:	f000 f893 	bl	8000584 <CANBUS_Error_Handler>
	}
};
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b004      	add	sp, #16
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <CAN_Transmit>:
 * @param TxMailbox uint32_t pointer to array that contains whole CAN message to transmit.
 * 
 * @retval None.
 **/
void CAN_Transmit(CAN_TxHeaderTypeDef *TxHeader, uint8_t TxDLC, uint8_t *TxData, uint32_t *TxMailbox)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	607a      	str	r2, [r7, #4]
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	200b      	movs	r0, #11
 8000476:	183b      	adds	r3, r7, r0
 8000478:	1c0a      	adds	r2, r1, #0
 800047a:	701a      	strb	r2, [r3, #0]
	TxHeader->DLC = TxDLC;
 800047c:	183b      	adds	r3, r7, r0
 800047e:	781a      	ldrb	r2, [r3, #0]
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	611a      	str	r2, [r3, #16]
	if(HAL_CAN_AddTxMessage(&hcan, TxHeader, TxData, TxMailbox) != HAL_OK)
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	68f9      	ldr	r1, [r7, #12]
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <CAN_Transmit+0x38>)
 800048c:	f001 f8b8 	bl	8001600 <HAL_CAN_AddTxMessage>
 8000490:	1e03      	subs	r3, r0, #0
 8000492:	d001      	beq.n	8000498 <CAN_Transmit+0x30>
	{
		CANBUS_Error_Handler();
 8000494:	f000 f876 	bl	8000584 <CANBUS_Error_Handler>
	}
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b004      	add	sp, #16
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	2000014c 	.word	0x2000014c

080004a4 <CAN_Respond>:
 * @brief Function to respond in connection with read request from MCU
 * 
 * @retval None.
 **/
void CAN_Respond(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_READ_REGS; i++)
 80004aa:	2300      	movs	r3, #0
 80004ac:	607b      	str	r3, [r7, #4]
 80004ae:	e013      	b.n	80004d8 <CAN_Respond+0x34>
	{
		if (ResponseMessage[i].Response_RegID == RxData[ReadRegID])
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <CAN_Respond+0x44>)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	011b      	lsls	r3, r3, #4
 80004b6:	18d3      	adds	r3, r2, r3
 80004b8:	3301      	adds	r3, #1
 80004ba:	781a      	ldrb	r2, [r3, #0]
 80004bc:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <CAN_Respond+0x48>)
 80004be:	785b      	ldrb	r3, [r3, #1]
 80004c0:	429a      	cmp	r2, r3
 80004c2:	d106      	bne.n	80004d2 <CAN_Respond+0x2e>
		{
			ResponseMessage[i].Read_ReactionHandler();
 80004c4:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <CAN_Respond+0x44>)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	3304      	adds	r3, #4
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4798      	blx	r3
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_READ_REGS; i++)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	3301      	adds	r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2b02      	cmp	r3, #2
 80004dc:	d9e8      	bls.n	80004b0 <CAN_Respond+0xc>
		}
	}
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	20000004 	.word	0x20000004
 80004ec:	200001d8 	.word	0x200001d8

080004f0 <CAN_ProcessWriteCommand>:
 * @brief Function to process write command
 * 
 * @retval None.
 **/
void CAN_ProcessWriteCommand(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_WRITE_REGS; i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	e018      	b.n	800052e <CAN_ProcessWriteCommand+0x3e>
	{
		if (WriteMessage[i].Write_RegID == RxData[WriteMessage_reg])
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <CAN_ProcessWriteCommand+0x50>)
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	0112      	lsls	r2, r2, #4
 8000502:	5cd2      	ldrb	r2, [r2, r3]
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <CAN_ProcessWriteCommand+0x54>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	429a      	cmp	r2, r3
 800050a:	d10d      	bne.n	8000528 <CAN_ProcessWriteCommand+0x38>
		{
			CAN_AcknowledgeWriteMessage(WriteMessage[i].Write_RegID);
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <CAN_ProcessWriteCommand+0x50>)
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	0112      	lsls	r2, r2, #4
 8000512:	5cd3      	ldrb	r3, [r2, r3]
 8000514:	0018      	movs	r0, r3
 8000516:	f000 f817 	bl	8000548 <CAN_AcknowledgeWriteMessage>
			WriteMessage[i].Write_ReactionHandler();
 800051a:	4a09      	ldr	r2, [pc, #36]	; (8000540 <CAN_ProcessWriteCommand+0x50>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	011b      	lsls	r3, r3, #4
 8000520:	18d3      	adds	r3, r2, r3
 8000522:	3304      	adds	r3, #4
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4798      	blx	r3
	for (int i = FIRST_ARRAY_ELEMENT; i < NUMBER_OF_WRITE_REGS; i++)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	3301      	adds	r3, #1
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2b0e      	cmp	r3, #14
 8000532:	d9e3      	bls.n	80004fc <CAN_ProcessWriteCommand+0xc>
		}
	}
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	20000034 	.word	0x20000034
 8000544:	200001d8 	.word	0x200001d8

08000548 <CAN_AcknowledgeWriteMessage>:
 * @param WriteReqID ID of received write instruction
 * 
 * @retval None.
 **/
void CAN_AcknowledgeWriteMessage(WriteRegsID WriteReqID)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	0002      	movs	r2, r0
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	701a      	strb	r2, [r3, #0]
	TxData[AcknowledgmentMessage_reg] = Write_AcknowledgmentMessage; // 1st Data Byte: Standard Write Acknowledgment instruction 
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <CAN_AcknowledgeWriteMessage+0x30>)
 8000556:	225d      	movs	r2, #93	; 0x5d
 8000558:	701a      	strb	r2, [r3, #0]
	TxData[WriteRegID] = WriteReqID;                                 // 2nd Data Byte: Acknowledged Received Write Command ReqID
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <CAN_AcknowledgeWriteMessage+0x30>)
 800055c:	1dfa      	adds	r2, r7, #7
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	705a      	strb	r2, [r3, #1]
	CAN_Transmit(&TxHeader, ACKNOWLEDMENT_DLC, TxData, &TxMailbox);  // Transmit Data
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <CAN_AcknowledgeWriteMessage+0x34>)
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <CAN_AcknowledgeWriteMessage+0x30>)
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <CAN_AcknowledgeWriteMessage+0x38>)
 8000568:	2102      	movs	r1, #2
 800056a:	f7ff ff7d 	bl	8000468 <CAN_Transmit>
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	200001d0 	.word	0x200001d0
 800057c:	200001e0 	.word	0x200001e0
 8000580:	2000019c 	.word	0x2000019c

08000584 <CANBUS_Error_Handler>:
 * @brief General error handler of CAN connection and communication
 * 
 * @retval None.
 * */
void CANBUS_Error_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	46c0      	nop			; (mov r8, r8)
	__disable_irq();
	/*
	Put here behaviour of ECU when error will be occured.
	*/
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <Read_Var_1_Handler>:

/** Add function name
 * Add brief
 **/
void Read_Var_1_Handler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
	//Var_1 = 222;
	//TxData[Res];						zakomentowałem na czas tesów odbioru
	//CAN_Transmit(&TxHeader, TxDLC, TxData, TxMailbox)
	//*(ResponseMessage[0].Response_Data1);
}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <Write_Toggle_Green_LED_Handler>:
/** Add function name
 * Add brief
 **/

void Write_Toggle_Green_LED_Handler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	*(WriteMessage[0].Write_State) = RxData[1];
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <Write_Toggle_Green_LED_Handler+0x2c>)
 80005a2:	785a      	ldrb	r2, [r3, #1]
 80005a4:	4b09      	ldr	r3, [pc, #36]	; (80005cc <Write_Toggle_Green_LED_Handler+0x30>)
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	1e51      	subs	r1, r2, #1
 80005aa:	418a      	sbcs	r2, r1
 80005ac:	b2d2      	uxtb	r2, r2
 80005ae:	701a      	strb	r2, [r3, #0]
	if(*(WriteMessage[0].Write_State) == true)
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <Write_Toggle_Green_LED_Handler+0x30>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <Write_Toggle_Green_LED_Handler+0x24>
	{
		//HAL_I2C_Master_Transmit_IT(&hi2c1, 0x01, &data_temp_label, data_size);
		//I2C_is_receiving_temp = 1;
		var = true;
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <Write_Toggle_Green_LED_Handler+0x34>)
 80005bc:	2201      	movs	r2, #1
 80005be:	701a      	strb	r2, [r3, #0]
		//*(WriteMessage[0].Write_State) = false;
	}
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	200001d8 	.word	0x200001d8
 80005cc:	20000034 	.word	0x20000034
 80005d0:	20000244 	.word	0x20000244

080005d4 <Print_Numbers_Handler>:


void Print_Numbers_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	*(WriteMessage[1].Write_State) = RxData[1];
 80005d8:	4b09      	ldr	r3, [pc, #36]	; (8000600 <Print_Numbers_Handler+0x2c>)
 80005da:	785a      	ldrb	r2, [r3, #1]
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <Print_Numbers_Handler+0x30>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	1e51      	subs	r1, r2, #1
 80005e2:	418a      	sbcs	r2, r1
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
	if(*(WriteMessage[1].Write_State) == true)
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <Print_Numbers_Handler+0x30>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <Print_Numbers_Handler+0x24>
	{
		//HAL_I2C_Master_Transmit_IT(&hi2c1, 0x01, &data_temp_label, data_size);
		//I2C_is_receiving_temp = 1;
		print = true;
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <Print_Numbers_Handler+0x34>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
		//*(WriteMessage[1].Write_State) = false;
	}
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	200001d8 	.word	0x200001d8
 8000604:	20000034 	.word	0x20000034
 8000608:	20000245 	.word	0x20000245

0800060c <map_value_Handler>:

void map_value_Handler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
/* USER CODE END WriteReactionHandlers */

	*(WriteMessage[2].Write_Data1) = RxData[1];
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <map_value_Handler+0x40>)
 8000612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000614:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <map_value_Handler+0x44>)
 8000616:	7852      	ldrb	r2, [r2, #1]
 8000618:	701a      	strb	r2, [r3, #0]
	/* if(*(WriteMessage[2].Write_State) == true)
	 {
		 confirm_button = true;
	 }*/

	CANdata[0] = 0x05;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <map_value_Handler+0x48>)
 800061c:	2205      	movs	r2, #5
 800061e:	701a      	strb	r2, [r3, #0]
	CANdata[1] = can_map_value;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <map_value_Handler+0x4c>)
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <map_value_Handler+0x48>)
 8000626:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <map_value_Handler+0x50>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <map_value_Handler+0x48>)
 800062e:	480c      	ldr	r0, [pc, #48]	; (8000660 <map_value_Handler+0x54>)
 8000630:	2101      	movs	r1, #1
 8000632:	f001 ff83 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000636:	2380      	movs	r3, #128	; 0x80
 8000638:	00db      	lsls	r3, r3, #3
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <map_value_Handler+0x58>)
 800063c:	0019      	movs	r1, r3
 800063e:	0010      	movs	r0, r2
 8000640:	f001 fecb 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000034 	.word	0x20000034
 8000650:	200001d8 	.word	0x200001d8
 8000654:	200001f4 	.word	0x200001f4
 8000658:	200001e6 	.word	0x200001e6
 800065c:	20000000 	.word	0x20000000
 8000660:	200001f8 	.word	0x200001f8
 8000664:	48000400 	.word	0x48000400

08000668 <tc_value_Handler>:

void tc_value_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	*(WriteMessage[3].Write_Data1) = RxData[1];
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <tc_value_Handler+0x40>)
 800066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <tc_value_Handler+0x44>)
 8000672:	7852      	ldrb	r2, [r2, #1]
 8000674:	701a      	strb	r2, [r3, #0]
//	if(RxData[0] == 0xD3)
//	{
//		tc_value_active = true;
//	}

	CANdata[0] = 0x04;
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <tc_value_Handler+0x48>)
 8000678:	2204      	movs	r2, #4
 800067a:	701a      	strb	r2, [r3, #0]
    CANdata[1] = can_tc_value;
 800067c:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <tc_value_Handler+0x4c>)
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <tc_value_Handler+0x48>)
 8000682:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <tc_value_Handler+0x50>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <tc_value_Handler+0x48>)
 800068a:	480c      	ldr	r0, [pc, #48]	; (80006bc <tc_value_Handler+0x54>)
 800068c:	2101      	movs	r1, #1
 800068e:	f001 ff55 	bl	800253c <HAL_I2C_Master_Transmit_IT>
    HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	4a0a      	ldr	r2, [pc, #40]	; (80006c0 <tc_value_Handler+0x58>)
 8000698:	0019      	movs	r1, r3
 800069a:	0010      	movs	r0, r2
 800069c:	f001 fe9d 	bl	80023da <HAL_GPIO_TogglePin>
}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000034 	.word	0x20000034
 80006ac:	200001d8 	.word	0x200001d8
 80006b0:	200001f4 	.word	0x200001f4
 80006b4:	200001e7 	.word	0x200001e7
 80006b8:	20000000 	.word	0x20000000
 80006bc:	200001f8 	.word	0x200001f8
 80006c0:	48000400 	.word	0x48000400

080006c4 <speed_value_Handler>:

void speed_value_Handler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	*(WriteMessage[4].Write_Data1) = RxData[1];
 80006c8:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <speed_value_Handler+0x40>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006cc:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <speed_value_Handler+0x44>)
 80006ce:	7852      	ldrb	r2, [r2, #1]
 80006d0:	701a      	strb	r2, [r3, #0]
//	if(RxData[0] == 0xE3)
//	{
//		speed_value_active = true;
//	}

	CANdata[0] = 0x03;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <speed_value_Handler+0x48>)
 80006d4:	2203      	movs	r2, #3
 80006d6:	701a      	strb	r2, [r3, #0]
	CANdata[1] = can_speed_value;
 80006d8:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <speed_value_Handler+0x4c>)
 80006da:	781a      	ldrb	r2, [r3, #0]
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <speed_value_Handler+0x48>)
 80006de:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <speed_value_Handler+0x50>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	4a09      	ldr	r2, [pc, #36]	; (800070c <speed_value_Handler+0x48>)
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <speed_value_Handler+0x54>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	f001 ff27 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 80006ee:	2380      	movs	r3, #128	; 0x80
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4a0a      	ldr	r2, [pc, #40]	; (800071c <speed_value_Handler+0x58>)
 80006f4:	0019      	movs	r1, r3
 80006f6:	0010      	movs	r0, r2
 80006f8:	f001 fe6f 	bl	80023da <HAL_GPIO_TogglePin>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	20000034 	.word	0x20000034
 8000708:	200001d8 	.word	0x200001d8
 800070c:	200001f4 	.word	0x200001f4
 8000710:	200001e8 	.word	0x200001e8
 8000714:	20000000 	.word	0x20000000
 8000718:	200001f8 	.word	0x200001f8
 800071c:	48000400 	.word	0x48000400

08000720 <diff_value_Handler>:

void diff_value_Handler(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	*(WriteMessage[5].Write_Data1) = RxData[1];
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <diff_value_Handler+0x40>)
 8000726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <diff_value_Handler+0x44>)
 800072a:	7852      	ldrb	r2, [r2, #1]
 800072c:	701a      	strb	r2, [r3, #0]
//	if(RxData[0] == 0xF3)
//	{
//		diff_value_active = true;
//	}

	  CANdata[0] = 0x06;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <diff_value_Handler+0x48>)
 8000730:	2206      	movs	r2, #6
 8000732:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_diff_value;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <diff_value_Handler+0x4c>)
 8000736:	781a      	ldrb	r2, [r3, #0]
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <diff_value_Handler+0x48>)
 800073a:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <diff_value_Handler+0x50>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <diff_value_Handler+0x48>)
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <diff_value_Handler+0x54>)
 8000744:	2101      	movs	r1, #1
 8000746:	f001 fef9 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <diff_value_Handler+0x58>)
 8000750:	0019      	movs	r1, r3
 8000752:	0010      	movs	r0, r2
 8000754:	f001 fe41 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	20000034 	.word	0x20000034
 8000764:	200001d8 	.word	0x200001d8
 8000768:	200001f4 	.word	0x200001f4
 800076c:	200001e9 	.word	0x200001e9
 8000770:	20000000 	.word	0x20000000
 8000774:	200001f8 	.word	0x200001f8
 8000778:	48000400 	.word	0x48000400

0800077c <ts_value_Handler>:

void ts_value_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	*(WriteMessage[6].Write_Data1) = RxData[1];
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <ts_value_Handler+0x40>)
 8000782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000784:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <ts_value_Handler+0x44>)
 8000786:	7852      	ldrb	r2, [r2, #1]
 8000788:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0x07;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <ts_value_Handler+0x48>)
 800078c:	2207      	movs	r2, #7
 800078e:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_ts_value;
 8000790:	4b0d      	ldr	r3, [pc, #52]	; (80007c8 <ts_value_Handler+0x4c>)
 8000792:	781a      	ldrb	r2, [r3, #0]
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <ts_value_Handler+0x48>)
 8000796:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <ts_value_Handler+0x50>)
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <ts_value_Handler+0x48>)
 800079e:	480c      	ldr	r0, [pc, #48]	; (80007d0 <ts_value_Handler+0x54>)
 80007a0:	2101      	movs	r1, #1
 80007a2:	f001 fecb 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	00db      	lsls	r3, r3, #3
 80007aa:	4a0a      	ldr	r2, [pc, #40]	; (80007d4 <ts_value_Handler+0x58>)
 80007ac:	0019      	movs	r1, r3
 80007ae:	0010      	movs	r0, r2
 80007b0:	f001 fe13 	bl	80023da <HAL_GPIO_TogglePin>
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	20000034 	.word	0x20000034
 80007c0:	200001d8 	.word	0x200001d8
 80007c4:	200001f4 	.word	0x200001f4
 80007c8:	200001ea 	.word	0x200001ea
 80007cc:	20000000 	.word	0x20000000
 80007d0:	200001f8 	.word	0x200001f8
 80007d4:	48000400 	.word	0x48000400

080007d8 <leng_value_Handler>:

void leng_value_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	*(WriteMessage[7].Write_Data1) = RxData[1];
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <leng_value_Handler+0x40>)
 80007de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80007e0:	4a0e      	ldr	r2, [pc, #56]	; (800081c <leng_value_Handler+0x44>)
 80007e2:	7852      	ldrb	r2, [r2, #1]
 80007e4:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0x08;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <leng_value_Handler+0x48>)
 80007e8:	2208      	movs	r2, #8
 80007ea:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_leng_value;
 80007ec:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <leng_value_Handler+0x4c>)
 80007ee:	781a      	ldrb	r2, [r3, #0]
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <leng_value_Handler+0x48>)
 80007f2:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <leng_value_Handler+0x50>)
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	4a09      	ldr	r2, [pc, #36]	; (8000820 <leng_value_Handler+0x48>)
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <leng_value_Handler+0x54>)
 80007fc:	2101      	movs	r1, #1
 80007fe:	f001 fe9d 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000802:	2380      	movs	r3, #128	; 0x80
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	4a0a      	ldr	r2, [pc, #40]	; (8000830 <leng_value_Handler+0x58>)
 8000808:	0019      	movs	r1, r3
 800080a:	0010      	movs	r0, r2
 800080c:	f001 fde5 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000810:	46c0      	nop			; (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	20000034 	.word	0x20000034
 800081c:	200001d8 	.word	0x200001d8
 8000820:	200001f4 	.word	0x200001f4
 8000824:	200001eb 	.word	0x200001eb
 8000828:	20000000 	.word	0x20000000
 800082c:	200001f8 	.word	0x200001f8
 8000830:	48000400 	.word	0x48000400

08000834 <linv_value_Handler>:

void linv_value_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	*(WriteMessage[8].Write_Data1) = RxData[1];
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <linv_value_Handler+0x40>)
 800083a:	228c      	movs	r2, #140	; 0x8c
 800083c:	589b      	ldr	r3, [r3, r2]
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <linv_value_Handler+0x44>)
 8000840:	7852      	ldrb	r2, [r2, #1]
 8000842:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0x09;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <linv_value_Handler+0x48>)
 8000846:	2209      	movs	r2, #9
 8000848:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_linv_value;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <linv_value_Handler+0x4c>)
 800084c:	781a      	ldrb	r2, [r3, #0]
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <linv_value_Handler+0x48>)
 8000850:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <linv_value_Handler+0x50>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	4a09      	ldr	r2, [pc, #36]	; (800087c <linv_value_Handler+0x48>)
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <linv_value_Handler+0x54>)
 800085a:	2101      	movs	r1, #1
 800085c:	f001 fe6e 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000860:	2380      	movs	r3, #128	; 0x80
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4a09      	ldr	r2, [pc, #36]	; (800088c <linv_value_Handler+0x58>)
 8000866:	0019      	movs	r1, r3
 8000868:	0010      	movs	r0, r2
 800086a:	f001 fdb6 	bl	80023da <HAL_GPIO_TogglePin>
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000034 	.word	0x20000034
 8000878:	200001d8 	.word	0x200001d8
 800087c:	200001f4 	.word	0x200001f4
 8000880:	200001ec 	.word	0x200001ec
 8000884:	20000000 	.word	0x20000000
 8000888:	200001f8 	.word	0x200001f8
 800088c:	48000400 	.word	0x48000400

08000890 <bat_value_Handler>:

void bat_value_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	*(WriteMessage[9].Write_Data1) = RxData[1];
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <bat_value_Handler+0x40>)
 8000896:	229c      	movs	r2, #156	; 0x9c
 8000898:	589b      	ldr	r3, [r3, r2]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <bat_value_Handler+0x44>)
 800089c:	7852      	ldrb	r2, [r2, #1]
 800089e:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0xA;
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <bat_value_Handler+0x48>)
 80008a2:	220a      	movs	r2, #10
 80008a4:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_bat_value;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <bat_value_Handler+0x4c>)
 80008a8:	781a      	ldrb	r2, [r3, #0]
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <bat_value_Handler+0x48>)
 80008ac:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <bat_value_Handler+0x50>)
 80008b0:	881b      	ldrh	r3, [r3, #0]
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <bat_value_Handler+0x48>)
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <bat_value_Handler+0x54>)
 80008b6:	2101      	movs	r1, #1
 80008b8:	f001 fe40 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <bat_value_Handler+0x58>)
 80008c2:	0019      	movs	r1, r3
 80008c4:	0010      	movs	r0, r2
 80008c6:	f001 fd88 	bl	80023da <HAL_GPIO_TogglePin>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000034 	.word	0x20000034
 80008d4:	200001d8 	.word	0x200001d8
 80008d8:	200001f4 	.word	0x200001f4
 80008dc:	200001ed 	.word	0x200001ed
 80008e0:	20000000 	.word	0x20000000
 80008e4:	200001f8 	.word	0x200001f8
 80008e8:	48000400 	.word	0x48000400

080008ec <rinv_value_Handler>:

void rinv_value_Handler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	*(WriteMessage[10].Write_Data1) = RxData[1];
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <rinv_value_Handler+0x40>)
 80008f2:	22ac      	movs	r2, #172	; 0xac
 80008f4:	589b      	ldr	r3, [r3, r2]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <rinv_value_Handler+0x44>)
 80008f8:	7852      	ldrb	r2, [r2, #1]
 80008fa:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0xB;
 80008fc:	4b0d      	ldr	r3, [pc, #52]	; (8000934 <rinv_value_Handler+0x48>)
 80008fe:	220b      	movs	r2, #11
 8000900:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_rinv_value;
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <rinv_value_Handler+0x4c>)
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <rinv_value_Handler+0x48>)
 8000908:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <rinv_value_Handler+0x50>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <rinv_value_Handler+0x48>)
 8000910:	480b      	ldr	r0, [pc, #44]	; (8000940 <rinv_value_Handler+0x54>)
 8000912:	2101      	movs	r1, #1
 8000914:	f001 fe12 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4a09      	ldr	r2, [pc, #36]	; (8000944 <rinv_value_Handler+0x58>)
 800091e:	0019      	movs	r1, r3
 8000920:	0010      	movs	r0, r2
 8000922:	f001 fd5a 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000034 	.word	0x20000034
 8000930:	200001d8 	.word	0x200001d8
 8000934:	200001f4 	.word	0x200001f4
 8000938:	200001ee 	.word	0x200001ee
 800093c:	20000000 	.word	0x20000000
 8000940:	200001f8 	.word	0x200001f8
 8000944:	48000400 	.word	0x48000400

08000948 <reng_value_Handler>:

void reng_value_Handler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	*(WriteMessage[11].Write_Data1) = RxData[1];
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <reng_value_Handler+0x40>)
 800094e:	22bc      	movs	r2, #188	; 0xbc
 8000950:	589b      	ldr	r3, [r3, r2]
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <reng_value_Handler+0x44>)
 8000954:	7852      	ldrb	r2, [r2, #1]
 8000956:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0xC;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <reng_value_Handler+0x48>)
 800095a:	220c      	movs	r2, #12
 800095c:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_reng_value;
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <reng_value_Handler+0x4c>)
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <reng_value_Handler+0x48>)
 8000964:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <reng_value_Handler+0x50>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <reng_value_Handler+0x48>)
 800096c:	480b      	ldr	r0, [pc, #44]	; (800099c <reng_value_Handler+0x54>)
 800096e:	2101      	movs	r1, #1
 8000970:	f001 fde4 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <reng_value_Handler+0x58>)
 800097a:	0019      	movs	r1, r3
 800097c:	0010      	movs	r0, r2
 800097e:	f001 fd2c 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000034 	.word	0x20000034
 800098c:	200001d8 	.word	0x200001d8
 8000990:	200001f4 	.word	0x200001f4
 8000994:	200001ef 	.word	0x200001ef
 8000998:	20000000 	.word	0x20000000
 800099c:	200001f8 	.word	0x200001f8
 80009a0:	48000400 	.word	0x48000400

080009a4 <err_value_Handler>:

void err_value_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	*(WriteMessage[12].Write_Data1) = RxData[1];
 80009a8:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <err_value_Handler+0x40>)
 80009aa:	22cc      	movs	r2, #204	; 0xcc
 80009ac:	589b      	ldr	r3, [r3, r2]
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <err_value_Handler+0x44>)
 80009b0:	7852      	ldrb	r2, [r2, #1]
 80009b2:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0xD;
 80009b4:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <err_value_Handler+0x48>)
 80009b6:	220d      	movs	r2, #13
 80009b8:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_err_value;
 80009ba:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <err_value_Handler+0x4c>)
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <err_value_Handler+0x48>)
 80009c0:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <err_value_Handler+0x50>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	4a09      	ldr	r2, [pc, #36]	; (80009ec <err_value_Handler+0x48>)
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <err_value_Handler+0x54>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	f001 fdb6 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	4a09      	ldr	r2, [pc, #36]	; (80009fc <err_value_Handler+0x58>)
 80009d6:	0019      	movs	r1, r3
 80009d8:	0010      	movs	r0, r2
 80009da:	f001 fcfe 	bl	80023da <HAL_GPIO_TogglePin>
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000034 	.word	0x20000034
 80009e8:	200001d8 	.word	0x200001d8
 80009ec:	200001f4 	.word	0x200001f4
 80009f0:	200001f0 	.word	0x200001f0
 80009f4:	20000000 	.word	0x20000000
 80009f8:	200001f8 	.word	0x200001f8
 80009fc:	48000400 	.word	0x48000400

08000a00 <hv_value_Handler>:

void hv_value_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	*(WriteMessage[13].Write_Data1) = RxData[1];
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <hv_value_Handler+0x40>)
 8000a06:	22dc      	movs	r2, #220	; 0xdc
 8000a08:	589b      	ldr	r3, [r3, r2]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <hv_value_Handler+0x44>)
 8000a0c:	7852      	ldrb	r2, [r2, #1]
 8000a0e:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0xE;
 8000a10:	4b0d      	ldr	r3, [pc, #52]	; (8000a48 <hv_value_Handler+0x48>)
 8000a12:	220e      	movs	r2, #14
 8000a14:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_hv_value;
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <hv_value_Handler+0x4c>)
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <hv_value_Handler+0x48>)
 8000a1c:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <hv_value_Handler+0x50>)
 8000a20:	881b      	ldrh	r3, [r3, #0]
 8000a22:	4a09      	ldr	r2, [pc, #36]	; (8000a48 <hv_value_Handler+0x48>)
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <hv_value_Handler+0x54>)
 8000a26:	2101      	movs	r1, #1
 8000a28:	f001 fd88 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <hv_value_Handler+0x58>)
 8000a32:	0019      	movs	r1, r3
 8000a34:	0010      	movs	r0, r2
 8000a36:	f001 fcd0 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000034 	.word	0x20000034
 8000a44:	200001d8 	.word	0x200001d8
 8000a48:	200001f4 	.word	0x200001f4
 8000a4c:	200001f1 	.word	0x200001f1
 8000a50:	20000000 	.word	0x20000000
 8000a54:	200001f8 	.word	0x200001f8
 8000a58:	48000400 	.word	0x48000400

08000a5c <low_value_Handler>:

void low_value_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	*(WriteMessage[14].Write_Data1) = RxData[1];
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <low_value_Handler+0x40>)
 8000a62:	22ec      	movs	r2, #236	; 0xec
 8000a64:	589b      	ldr	r3, [r3, r2]
 8000a66:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <low_value_Handler+0x44>)
 8000a68:	7852      	ldrb	r2, [r2, #1]
 8000a6a:	701a      	strb	r2, [r3, #0]

	  CANdata[0] = 0xF;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <low_value_Handler+0x48>)
 8000a6e:	220f      	movs	r2, #15
 8000a70:	701a      	strb	r2, [r3, #0]
	  CANdata[1] = can_low_value;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <low_value_Handler+0x4c>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <low_value_Handler+0x48>)
 8000a78:	705a      	strb	r2, [r3, #1]
	  HAL_I2C_Master_Transmit_IT(&hi2c1, slave_addr, CANdata, CANsize);
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <low_value_Handler+0x50>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	4a09      	ldr	r2, [pc, #36]	; (8000aa4 <low_value_Handler+0x48>)
 8000a80:	480b      	ldr	r0, [pc, #44]	; (8000ab0 <low_value_Handler+0x54>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	f001 fd5a 	bl	800253c <HAL_I2C_Master_Transmit_IT>
	  HAL_GPIO_TogglePin(PCB_LED_RED_GPIO_Port, PCB_LED_RED_Pin);
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	00db      	lsls	r3, r3, #3
 8000a8c:	4a09      	ldr	r2, [pc, #36]	; (8000ab4 <low_value_Handler+0x58>)
 8000a8e:	0019      	movs	r1, r3
 8000a90:	0010      	movs	r0, r2
 8000a92:	f001 fca2 	bl	80023da <HAL_GPIO_TogglePin>
}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000034 	.word	0x20000034
 8000aa0:	200001d8 	.word	0x200001d8
 8000aa4:	200001f4 	.word	0x200001f4
 8000aa8:	200001f2 	.word	0x200001f2
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200001f8 	.word	0x200001f8
 8000ab4:	48000400 	.word	0x48000400

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	240c      	movs	r4, #12
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2314      	movs	r3, #20
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f004 fcdd 	bl	8005488 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ace:	4b34      	ldr	r3, [pc, #208]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000ad0:	695a      	ldr	r2, [r3, #20]
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	03c9      	lsls	r1, r1, #15
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	615a      	str	r2, [r3, #20]
 8000adc:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	2380      	movs	r3, #128	; 0x80
 8000ae2:	03db      	lsls	r3, r3, #15
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b2d      	ldr	r3, [pc, #180]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000aec:	695a      	ldr	r2, [r3, #20]
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	0289      	lsls	r1, r1, #10
 8000af4:	430a      	orrs	r2, r1
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000afa:	695a      	ldr	r2, [r3, #20]
 8000afc:	2380      	movs	r3, #128	; 0x80
 8000afe:	029b      	lsls	r3, r3, #10
 8000b00:	4013      	ands	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000b08:	695a      	ldr	r2, [r3, #20]
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	02c9      	lsls	r1, r1, #11
 8000b10:	430a      	orrs	r2, r1
 8000b12:	615a      	str	r2, [r3, #20]
 8000b14:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xe8>)
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	2380      	movs	r3, #128	; 0x80
 8000b1a:	02db      	lsls	r3, r3, #11
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PCB_LED_RED_Pin|PCB_LED_GREEN_Pin|LED_MF_GREEN_Pin|LED_MF_RED_Pin
 8000b22:	23fc      	movs	r3, #252	; 0xfc
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	481f      	ldr	r0, [pc, #124]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	0019      	movs	r1, r3
 8000b2c:	f001 fc38 	bl	80023a0 <HAL_GPIO_WritePin>
                          |LED_MDF_GREEN_Pin|LED_MDF_RED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8000b30:	193b      	adds	r3, r7, r4
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	601a      	str	r2, [r3, #0]
                          |SW5_Pin|SW6_Pin|SW7_Pin|SW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2200      	movs	r2, #0
 8000b3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	193a      	adds	r2, r7, r4
 8000b44:	2390      	movs	r3, #144	; 0x90
 8000b46:	05db      	lsls	r3, r3, #23
 8000b48:	0011      	movs	r1, r2
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f001 fac0 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SW9_Pin|SW10_Pin;
 8000b50:	193b      	adds	r3, r7, r4
 8000b52:	2203      	movs	r2, #3
 8000b54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b56:	193b      	adds	r3, r7, r4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b66:	0019      	movs	r1, r3
 8000b68:	0010      	movs	r0, r2
 8000b6a:	f001 fab1 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PCB_LED_RED_Pin|PCB_LED_GREEN_Pin|LED_MF_GREEN_Pin|LED_MF_RED_Pin
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	22fc      	movs	r2, #252	; 0xfc
 8000b74:	0212      	lsls	r2, r2, #8
 8000b76:	601a      	str	r2, [r3, #0]
                          |LED_MDF_GREEN_Pin|LED_MDF_RED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <MX_GPIO_Init+0xec>)
 8000b8e:	0019      	movs	r1, r3
 8000b90:	0010      	movs	r0, r2
 8000b92:	f001 fa9d 	bl	80020d0 <HAL_GPIO_Init>

}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b009      	add	sp, #36	; 0x24
 8000b9c:	bd90      	pop	{r4, r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000400 	.word	0x48000400

08000ba8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bae:	4a1c      	ldr	r2, [pc, #112]	; (8000c20 <MX_I2C1_Init+0x78>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bb4:	4a1b      	ldr	r2, [pc, #108]	; (8000c24 <MX_I2C1_Init+0x7c>)
 8000bb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 fc13 	bl	8002410 <HAL_I2C_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 f8e8 	bl	8000dc2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f003 f832 	bl	8003c60 <HAL_I2CEx_ConfigAnalogFilter>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 f8df 	bl	8000dc2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <MX_I2C1_Init+0x74>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f003 f875 	bl	8003cf8 <HAL_I2CEx_ConfigDigitalFilter>
 8000c0e:	1e03      	subs	r3, r0, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c12:	f000 f8d6 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	200001f8 	.word	0x200001f8
 8000c20:	40005400 	.word	0x40005400
 8000c24:	2000090e 	.word	0x2000090e

08000c28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b08b      	sub	sp, #44	; 0x2c
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	2414      	movs	r4, #20
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	0018      	movs	r0, r3
 8000c36:	2314      	movs	r3, #20
 8000c38:	001a      	movs	r2, r3
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f004 fc24 	bl	8005488 <memset>
  if(i2cHandle->Instance==I2C1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a21      	ldr	r2, [pc, #132]	; (8000ccc <HAL_I2C_MspInit+0xa4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d13b      	bne.n	8000cc2 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000c4c:	695a      	ldr	r2, [r3, #20]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000c50:	2180      	movs	r1, #128	; 0x80
 8000c52:	0289      	lsls	r1, r1, #10
 8000c54:	430a      	orrs	r2, r1
 8000c56:	615a      	str	r2, [r3, #20]
 8000c58:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000c5a:	695a      	ldr	r2, [r3, #20]
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	029b      	lsls	r3, r3, #10
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000c66:	193b      	adds	r3, r7, r4
 8000c68:	22c0      	movs	r2, #192	; 0xc0
 8000c6a:	00d2      	lsls	r2, r2, #3
 8000c6c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c6e:	0021      	movs	r1, r4
 8000c70:	187b      	adds	r3, r7, r1
 8000c72:	2212      	movs	r2, #18
 8000c74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c82:	187b      	adds	r3, r7, r1
 8000c84:	2204      	movs	r2, #4
 8000c86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	187a      	adds	r2, r7, r1
 8000c8a:	2390      	movs	r3, #144	; 0x90
 8000c8c:	05db      	lsls	r3, r3, #23
 8000c8e:	0011      	movs	r1, r2
 8000c90:	0018      	movs	r0, r3
 8000c92:	f001 fa1d 	bl	80020d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0389      	lsls	r1, r1, #14
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	61da      	str	r2, [r3, #28]
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_I2C_MspInit+0xa8>)
 8000ca6:	69da      	ldr	r2, [r3, #28]
 8000ca8:	2380      	movs	r3, #128	; 0x80
 8000caa:	039b      	lsls	r3, r3, #14
 8000cac:	4013      	ands	r3, r2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2017      	movs	r0, #23
 8000cb8:	f001 f986 	bl	8001fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000cbc:	2017      	movs	r0, #23
 8000cbe:	f001 f998 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	b00b      	add	sp, #44	; 0x2c
 8000cc8:	bd90      	pop	{r4, r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cda:	f000 f9f7 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cde:	f000 f813 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce2:	f7ff fee9 	bl	8000ab8 <MX_GPIO_Init>
  MX_CAN_Init();
 8000ce6:	f7ff fa9b 	bl	8000220 <MX_CAN_Init>
  MX_I2C1_Init();
 8000cea:	f7ff ff5d 	bl	8000ba8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000cee:	f000 f92d 	bl	8000f4c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000cf2:	f000 f8dd 	bl	8000eb0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  CAN_Init();
 8000cf6:	f7ff fb21 	bl	800033c <CAN_Init>
  //SLAVE MUSI MIEĆ ZASILANIE W MOMENCIE WYWO�?ANIA TEJ FUNKCJI, INACZEJ PROGRAM PÓJDZIE DALEJ
  HAL_Delay(200);
  HAL_TIM_Base_Start_IT(&htim14);
*/

  uint8_t CANdata[2] = {0, 0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	801a      	strh	r2, [r3, #0]
  uint16_t CANsize = 2;
 8000d00:	1dbb      	adds	r3, r7, #6
 8000d02:	2202      	movs	r2, #2
 8000d04:	801a      	strh	r2, [r3, #0]

  while (1)
 8000d06:	e7fe      	b.n	8000d06 <main+0x32>

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b099      	sub	sp, #100	; 0x64
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	242c      	movs	r4, #44	; 0x2c
 8000d10:	193b      	adds	r3, r7, r4
 8000d12:	0018      	movs	r0, r3
 8000d14:	2334      	movs	r3, #52	; 0x34
 8000d16:	001a      	movs	r2, r3
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f004 fbb5 	bl	8005488 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1e:	231c      	movs	r3, #28
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	2310      	movs	r3, #16
 8000d26:	001a      	movs	r2, r3
 8000d28:	2100      	movs	r1, #0
 8000d2a:	f004 fbad 	bl	8005488 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2e:	1d3b      	adds	r3, r7, #4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2318      	movs	r3, #24
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f004 fba6 	bl	8005488 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d3c:	0021      	movs	r1, r4
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2203      	movs	r2, #3
 8000d42:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	2201      	movs	r2, #1
 8000d48:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	187b      	adds	r3, r7, r1
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2210      	movs	r2, #16
 8000d54:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2200      	movs	r2, #0
 8000d5a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f003 f816 	bl	8003d90 <HAL_RCC_OscConfig>
 8000d64:	1e03      	subs	r3, r0, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000d68:	f000 f82b 	bl	8000dc2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6c:	211c      	movs	r1, #28
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2201      	movs	r2, #1
 8000d78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	2100      	movs	r1, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f003 fb86 	bl	800449c <HAL_RCC_ClockConfig>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d94:	f000 f815 	bl	8000dc2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2221      	movs	r2, #33	; 0x21
 8000d9c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	0018      	movs	r0, r3
 8000dae:	f003 fcf1 	bl	8004794 <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000db6:	f000 f804 	bl	8000dc2 <Error_Handler>
  }
}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b019      	add	sp, #100	; 0x64
 8000dc0:	bd90      	pop	{r4, r7, pc}

08000dc2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc6:	b672      	cpsid	i
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dca:	e7fe      	b.n	8000dca <Error_Handler+0x8>

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	699a      	ldr	r2, [r3, #24]
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	2101      	movs	r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	619a      	str	r2, [r3, #24]
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	699b      	ldr	r3, [r3, #24]
 8000de2:	2201      	movs	r2, #1
 8000de4:	4013      	ands	r3, r2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	69da      	ldr	r2, [r3, #28]
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	0549      	lsls	r1, r1, #21
 8000df4:	430a      	orrs	r2, r1
 8000df6:	61da      	str	r2, [r3, #28]
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_MspInit+0x44>)
 8000dfa:	69da      	ldr	r2, [r3, #28]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	055b      	lsls	r3, r3, #21
 8000e00:	4013      	ands	r3, r2
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	40021000 	.word	0x40021000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f990 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <TIM14_IRQHandler+0x14>)
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f003 fde0 	bl	8004a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	20000248 	.word	0x20000248

08000e5c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <I2C1_IRQHandler+0x2c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	23e0      	movs	r3, #224	; 0xe0
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d004      	beq.n	8000e78 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <I2C1_IRQHandler+0x2c>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fbf9 	bl	8002668 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8000e76:	e003      	b.n	8000e80 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <I2C1_IRQHandler+0x2c>)
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f001 fbda 	bl	8002634 <HAL_I2C_EV_IRQHandler>
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	200001f8 	.word	0x200001f8

08000e8c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <CEC_CAN_IRQHandler+0x14>)
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 fdd8 	bl	8001a48 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	2000014c 	.word	0x2000014c

08000ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000eb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <MX_TIM14_Init+0x44>)
 8000eb8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7999;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ebc:	4a0e      	ldr	r2, [pc, #56]	; (8000ef8 <MX_TIM14_Init+0x48>)
 8000ebe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ec8:	22fa      	movs	r2, #250	; 0xfa
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000eda:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <MX_TIM14_Init+0x40>)
 8000edc:	0018      	movs	r0, r3
 8000ede:	f003 fd47 	bl	8004970 <HAL_TIM_Base_Init>
 8000ee2:	1e03      	subs	r3, r0, #0
 8000ee4:	d001      	beq.n	8000eea <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000ee6:	f7ff ff6c 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000248 	.word	0x20000248
 8000ef4:	40002000 	.word	0x40002000
 8000ef8:	00001f3f 	.word	0x00001f3f

08000efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_TIM_Base_MspInit+0x48>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d115      	bne.n	8000f3a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_TIM_Base_MspInit+0x4c>)
 8000f10:	69da      	ldr	r2, [r3, #28]
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_TIM_Base_MspInit+0x4c>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0049      	lsls	r1, r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	61da      	str	r2, [r3, #28]
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_TIM_Base_MspInit+0x4c>)
 8000f1e:	69da      	ldr	r2, [r3, #28]
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2013      	movs	r0, #19
 8000f30:	f001 f84a 	bl	8001fc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000f34:	2013      	movs	r0, #19
 8000f36:	f001 f85c 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b004      	add	sp, #16
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40002000 	.word	0x40002000
 8000f48:	40021000 	.word	0x40021000

08000f4c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_USART1_UART_Init+0x5c>)
 8000f54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f58:	2296      	movs	r2, #150	; 0x96
 8000f5a:	0212      	lsls	r2, r2, #8
 8000f5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f64:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f72:	220c      	movs	r2, #12
 8000f74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f8e:	4b05      	ldr	r3, [pc, #20]	; (8000fa4 <MX_USART1_UART_Init+0x58>)
 8000f90:	0018      	movs	r0, r3
 8000f92:	f003 ff01 	bl	8004d98 <HAL_UART_Init>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f7ff ff12 	bl	8000dc2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000290 	.word	0x20000290
 8000fa8:	40013800 	.word	0x40013800

08000fac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b08b      	sub	sp, #44	; 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	2414      	movs	r4, #20
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	0018      	movs	r0, r3
 8000fba:	2314      	movs	r3, #20
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f004 fa62 	bl	8005488 <memset>
  if(uartHandle->Instance==USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_UART_MspInit+0x90>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d131      	bne.n	8001032 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UART_MspInit+0x94>)
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_MspInit+0x94>)
 8000fd4:	2180      	movs	r1, #128	; 0x80
 8000fd6:	01c9      	lsls	r1, r1, #7
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_UART_MspInit+0x94>)
 8000fde:	699a      	ldr	r2, [r3, #24]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	01db      	lsls	r3, r3, #7
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_UART_MspInit+0x94>)
 8000fec:	695a      	ldr	r2, [r3, #20]
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_UART_MspInit+0x94>)
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	02c9      	lsls	r1, r1, #11
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	615a      	str	r2, [r3, #20]
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x94>)
 8000ffa:	695a      	ldr	r2, [r3, #20]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	02db      	lsls	r3, r3, #11
 8001000:	4013      	ands	r3, r2
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001006:	0021      	movs	r1, r4
 8001008:	187b      	adds	r3, r7, r1
 800100a:	22c0      	movs	r2, #192	; 0xc0
 800100c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2202      	movs	r2, #2
 8001012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	187b      	adds	r3, r7, r1
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800101a:	187b      	adds	r3, r7, r1
 800101c:	2203      	movs	r2, #3
 800101e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	187b      	adds	r3, r7, r1
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_UART_MspInit+0x98>)
 800102a:	0019      	movs	r1, r3
 800102c:	0010      	movs	r0, r2
 800102e:	f001 f84f 	bl	80020d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	46bd      	mov	sp, r7
 8001036:	b00b      	add	sp, #44	; 0x2c
 8001038:	bd90      	pop	{r4, r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	40013800 	.word	0x40013800
 8001040:	40021000 	.word	0x40021000
 8001044:	48000400 	.word	0x48000400

08001048 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001048:	4813      	ldr	r0, [pc, #76]	; (8001098 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800104a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800104c:	4813      	ldr	r0, [pc, #76]	; (800109c <LoopForever+0x6>)
    LDR R1, [R0]
 800104e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001050:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <LoopForever+0xa>)
    CMP R1, R2
 8001054:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001056:	d105      	bne.n	8001064 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800105a:	4913      	ldr	r1, [pc, #76]	; (80010a8 <LoopForever+0x12>)
    STR R1, [R0]
 800105c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800105e:	4813      	ldr	r0, [pc, #76]	; (80010ac <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001060:	4913      	ldr	r1, [pc, #76]	; (80010b0 <LoopForever+0x1a>)
    STR R1, [R0]
 8001062:	6001      	str	r1, [r0, #0]

08001064 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001066:	4914      	ldr	r1, [pc, #80]	; (80010b8 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <LoopForever+0x26>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800107c:	4c11      	ldr	r4, [pc, #68]	; (80010c4 <LoopForever+0x2e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800108a:	f7ff ff0b 	bl	8000ea4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800108e:	f004 f9d7 	bl	8005440 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001092:	f7ff fe1f 	bl	8000cd4 <main>

08001096 <LoopForever>:

LoopForever:
    b LoopForever
 8001096:	e7fe      	b.n	8001096 <LoopForever>
  ldr   r0, =_estack
 8001098:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800109c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80010a0:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80010a4:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80010a8:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80010ac:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80010b0:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80010bc:	080054f0 	.word	0x080054f0
  ldr r2, =_sbss
 80010c0:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80010c4:	20000318 	.word	0x20000318

080010c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_IRQHandler>
	...

080010cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <HAL_Init+0x24>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_Init+0x24>)
 80010d6:	2110      	movs	r1, #16
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 f809 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e2:	f7ff fe73 	bl	8000dcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_InitTick+0x5c>)
 80010fe:	681c      	ldr	r4, [r3, #0]
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x60>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	0019      	movs	r1, r3
 8001106:	23fa      	movs	r3, #250	; 0xfa
 8001108:	0098      	lsls	r0, r3, #2
 800110a:	f7fe fffd 	bl	8000108 <__udivsi3>
 800110e:	0003      	movs	r3, r0
 8001110:	0019      	movs	r1, r3
 8001112:	0020      	movs	r0, r4
 8001114:	f7fe fff8 	bl	8000108 <__udivsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	0018      	movs	r0, r3
 800111c:	f000 ff79 	bl	8002012 <HAL_SYSTICK_Config>
 8001120:	1e03      	subs	r3, r0, #0
 8001122:	d001      	beq.n	8001128 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e00f      	b.n	8001148 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b03      	cmp	r3, #3
 800112c:	d80b      	bhi.n	8001146 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	2301      	movs	r3, #1
 8001132:	425b      	negs	r3, r3
 8001134:	2200      	movs	r2, #0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 ff46 	bl	8001fc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_InitTick+0x64>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b003      	add	sp, #12
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	20000124 	.word	0x20000124
 8001154:	2000012c 	.word	0x2000012c
 8001158:	20000128 	.word	0x20000128

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	001a      	movs	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	18d2      	adds	r2, r2, r3
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_IncTick+0x20>)
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	2000012c 	.word	0x2000012c
 800117c:	20000314 	.word	0x20000314

08001180 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	20000314 	.word	0x20000314

08001194 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e0f0      	b.n	8001388 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	5c9b      	ldrb	r3, [r3, r2]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	0018      	movs	r0, r3
 80011b6:	f7ff f86b 	bl	8000290 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2101      	movs	r1, #1
 80011c6:	430a      	orrs	r2, r1
 80011c8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ca:	f7ff ffd9 	bl	8001180 <HAL_GetTick>
 80011ce:	0003      	movs	r3, r0
 80011d0:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011d2:	e013      	b.n	80011fc <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d4:	f7ff ffd4 	bl	8001180 <HAL_GetTick>
 80011d8:	0002      	movs	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90c      	bls.n	80011fc <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	2280      	movs	r2, #128	; 0x80
 80011e8:	0292      	lsls	r2, r2, #10
 80011ea:	431a      	orrs	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	2105      	movs	r1, #5
 80011f6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0c5      	b.n	8001388 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	d0e5      	beq.n	80011d4 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2102      	movs	r1, #2
 8001214:	438a      	bics	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001218:	f7ff ffb2 	bl	8001180 <HAL_GetTick>
 800121c:	0003      	movs	r3, r0
 800121e:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001220:	e013      	b.n	800124a <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001222:	f7ff ffad 	bl	8001180 <HAL_GetTick>
 8001226:	0002      	movs	r2, r0
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b0a      	cmp	r3, #10
 800122e:	d90c      	bls.n	800124a <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	0292      	lsls	r2, r2, #10
 8001238:	431a      	orrs	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2220      	movs	r2, #32
 8001242:	2105      	movs	r1, #5
 8001244:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e09e      	b.n	8001388 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2202      	movs	r2, #2
 8001252:	4013      	ands	r3, r2
 8001254:	d1e5      	bne.n	8001222 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7e1b      	ldrb	r3, [r3, #24]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d108      	bne.n	8001270 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2180      	movs	r1, #128	; 0x80
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e007      	b.n	8001280 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2180      	movs	r1, #128	; 0x80
 800127c:	438a      	bics	r2, r1
 800127e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7e5b      	ldrb	r3, [r3, #25]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e007      	b.n	80012aa <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	438a      	bics	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7e9b      	ldrb	r3, [r3, #26]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2120      	movs	r1, #32
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e007      	b.n	80012d4 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2120      	movs	r1, #32
 80012d0:	438a      	bics	r2, r1
 80012d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7edb      	ldrb	r3, [r3, #27]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2110      	movs	r1, #16
 80012e8:	438a      	bics	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	e007      	b.n	80012fe <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2110      	movs	r1, #16
 80012fa:	430a      	orrs	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7f1b      	ldrb	r3, [r3, #28]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d108      	bne.n	8001318 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2108      	movs	r1, #8
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e007      	b.n	8001328 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2108      	movs	r1, #8
 8001324:	438a      	bics	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7f5b      	ldrb	r3, [r3, #29]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d108      	bne.n	8001342 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2104      	movs	r1, #4
 800133c:	430a      	orrs	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e007      	b.n	8001352 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2104      	movs	r1, #4
 800134e:	438a      	bics	r2, r1
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	431a      	orrs	r2, r3
 8001368:	0011      	movs	r1, r2
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2220      	movs	r2, #32
 8001382:	2101      	movs	r1, #1
 8001384:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013a0:	2013      	movs	r0, #19
 80013a2:	183b      	adds	r3, r7, r0
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	2120      	movs	r1, #32
 80013a8:	5c52      	ldrb	r2, [r2, r1]
 80013aa:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80013ac:	0002      	movs	r2, r0
 80013ae:	18bb      	adds	r3, r7, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d004      	beq.n	80013c0 <HAL_CAN_ConfigFilter+0x30>
 80013b6:	18bb      	adds	r3, r7, r2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d000      	beq.n	80013c0 <HAL_CAN_ConfigFilter+0x30>
 80013be:	e0cd      	b.n	800155c <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	58d3      	ldr	r3, [r2, r3]
 80013c8:	2201      	movs	r2, #1
 80013ca:	431a      	orrs	r2, r3
 80013cc:	0011      	movs	r1, r2
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	221f      	movs	r2, #31
 80013dc:	4013      	ands	r3, r2
 80013de:	2201      	movs	r2, #1
 80013e0:	409a      	lsls	r2, r3
 80013e2:	0013      	movs	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	2387      	movs	r3, #135	; 0x87
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	58d3      	ldr	r3, [r2, r3]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	401a      	ands	r2, r3
 80013f4:	0011      	movs	r1, r2
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	2387      	movs	r3, #135	; 0x87
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d129      	bne.n	800145a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	2383      	movs	r3, #131	; 0x83
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	58d3      	ldr	r3, [r2, r3]
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	43d2      	mvns	r2, r2
 8001412:	401a      	ands	r2, r3
 8001414:	0011      	movs	r1, r2
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	2383      	movs	r3, #131	; 0x83
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	041b      	lsls	r3, r3, #16
 800142a:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001430:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	3248      	adds	r2, #72	; 0x48
 8001436:	00d2      	lsls	r2, r2, #3
 8001438:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	041b      	lsls	r3, r3, #16
 8001446:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800144c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144e:	6979      	ldr	r1, [r7, #20]
 8001450:	3348      	adds	r3, #72	; 0x48
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	18cb      	adds	r3, r1, r3
 8001456:	3304      	adds	r3, #4
 8001458:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d128      	bne.n	80014b4 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	2383      	movs	r3, #131	; 0x83
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	58d2      	ldr	r2, [r2, r3]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	431a      	orrs	r2, r3
 800146e:	0011      	movs	r1, r2
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2383      	movs	r3, #131	; 0x83
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	041b      	lsls	r3, r3, #16
 8001484:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800148a:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3248      	adds	r2, #72	; 0x48
 8001490:	00d2      	lsls	r2, r2, #3
 8001492:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	041b      	lsls	r3, r3, #16
 80014a0:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80014a6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	3348      	adds	r3, #72	; 0x48
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	18cb      	adds	r3, r1, r3
 80014b0:	3304      	adds	r3, #4
 80014b2:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10c      	bne.n	80014d6 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	2381      	movs	r3, #129	; 0x81
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	58d3      	ldr	r3, [r2, r3]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	43d2      	mvns	r2, r2
 80014c8:	401a      	ands	r2, r3
 80014ca:	0011      	movs	r1, r2
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	2381      	movs	r3, #129	; 0x81
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	50d1      	str	r1, [r2, r3]
 80014d4:	e00a      	b.n	80014ec <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	2381      	movs	r3, #129	; 0x81
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	58d2      	ldr	r2, [r2, r3]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	431a      	orrs	r2, r3
 80014e2:	0011      	movs	r1, r2
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	2381      	movs	r3, #129	; 0x81
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10c      	bne.n	800150e <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014f4:	697a      	ldr	r2, [r7, #20]
 80014f6:	2385      	movs	r3, #133	; 0x85
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	58d3      	ldr	r3, [r2, r3]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	43d2      	mvns	r2, r2
 8001500:	401a      	ands	r2, r3
 8001502:	0011      	movs	r1, r2
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	2385      	movs	r3, #133	; 0x85
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	50d1      	str	r1, [r2, r3]
 800150c:	e00a      	b.n	8001524 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	2385      	movs	r3, #133	; 0x85
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	58d2      	ldr	r2, [r2, r3]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	431a      	orrs	r2, r3
 800151a:	0011      	movs	r1, r2
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	2385      	movs	r3, #133	; 0x85
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d10a      	bne.n	8001542 <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800152c:	697a      	ldr	r2, [r7, #20]
 800152e:	2387      	movs	r3, #135	; 0x87
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	58d2      	ldr	r2, [r2, r3]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	431a      	orrs	r2, r3
 8001538:	0011      	movs	r1, r2
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	2387      	movs	r3, #135	; 0x87
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	58d3      	ldr	r3, [r2, r3]
 800154a:	2201      	movs	r2, #1
 800154c:	4393      	bics	r3, r2
 800154e:	0019      	movs	r1, r3
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8001558:	2300      	movs	r3, #0
 800155a:	e007      	b.n	800156c <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	02d2      	lsls	r2, r2, #11
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
  }
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b006      	add	sp, #24
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2220      	movs	r2, #32
 8001580:	5c9b      	ldrb	r3, [r3, r2]
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b01      	cmp	r3, #1
 8001586:	d12f      	bne.n	80015e8 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	2102      	movs	r1, #2
 800158e:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2101      	movs	r1, #1
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80015a0:	f7ff fdee 	bl	8001180 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015a8:	e013      	b.n	80015d2 <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015aa:	f7ff fde9 	bl	8001180 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b0a      	cmp	r3, #10
 80015b6:	d90c      	bls.n	80015d2 <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	0292      	lsls	r2, r2, #10
 80015c0:	431a      	orrs	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2220      	movs	r2, #32
 80015ca:	2105      	movs	r1, #5
 80015cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e012      	b.n	80015f8 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	4013      	ands	r3, r2
 80015dc:	d1e5      	bne.n	80015aa <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80015e4:	2300      	movs	r3, #0
 80015e6:	e007      	b.n	80015f8 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	0312      	lsls	r2, r2, #12
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
  }
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b004      	add	sp, #16
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
 800160c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800160e:	201f      	movs	r0, #31
 8001610:	183b      	adds	r3, r7, r0
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	2120      	movs	r1, #32
 8001616:	5c52      	ldrb	r2, [r2, r1]
 8001618:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001622:	183b      	adds	r3, r7, r0
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d004      	beq.n	8001634 <HAL_CAN_AddTxMessage+0x34>
 800162a:	183b      	adds	r3, r7, r0
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d000      	beq.n	8001634 <HAL_CAN_AddTxMessage+0x34>
 8001632:	e0b7      	b.n	80017a4 <HAL_CAN_AddTxMessage+0x1a4>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	04db      	lsls	r3, r3, #19
 800163a:	4013      	ands	r3, r2
 800163c:	d10a      	bne.n	8001654 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	051b      	lsls	r3, r3, #20
 8001644:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001646:	d105      	bne.n	8001654 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	055b      	lsls	r3, r3, #21
 800164e:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001650:	d100      	bne.n	8001654 <HAL_CAN_AddTxMessage+0x54>
 8001652:	e09e      	b.n	8001792 <HAL_CAN_AddTxMessage+0x192>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	0e1b      	lsrs	r3, r3, #24
 8001658:	2203      	movs	r2, #3
 800165a:	4013      	ands	r3, r2
 800165c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d908      	bls.n	8001676 <HAL_CAN_AddTxMessage+0x76>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	0412      	lsls	r2, r2, #16
 800166c:	431a      	orrs	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e09e      	b.n	80017b4 <HAL_CAN_AddTxMessage+0x1b4>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10c      	bne.n	80016a2 <HAL_CAN_AddTxMessage+0xa2>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4311      	orrs	r1, r2
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	3218      	adds	r2, #24
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	50d1      	str	r1, [r2, r3]
 80016a0:	e00f      	b.n	80016c2 <HAL_CAN_AddTxMessage+0xc2>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ac:	431a      	orrs	r2, r3
 80016ae:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80016b8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	3218      	adds	r2, #24
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6819      	ldr	r1, [r3, #0]
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	691a      	ldr	r2, [r3, #16]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	3318      	adds	r3, #24
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	18cb      	adds	r3, r1, r3
 80016d2:	3304      	adds	r3, #4
 80016d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	7d1b      	ldrb	r3, [r3, #20]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d112      	bne.n	8001704 <HAL_CAN_AddTxMessage+0x104>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	3318      	adds	r3, #24
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	3304      	adds	r3, #4
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6819      	ldr	r1, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	431a      	orrs	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3318      	adds	r3, #24
 80016fc:	011b      	lsls	r3, r3, #4
 80016fe:	18cb      	adds	r3, r1, r3
 8001700:	3304      	adds	r3, #4
 8001702:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3307      	adds	r3, #7
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	061a      	lsls	r2, r3, #24
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3306      	adds	r3, #6
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	041b      	lsls	r3, r3, #16
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3305      	adds	r3, #5
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	021b      	lsls	r3, r3, #8
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3304      	adds	r3, #4
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	0019      	movs	r1, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	6979      	ldr	r1, [r7, #20]
 8001730:	23c6      	movs	r3, #198	; 0xc6
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	0109      	lsls	r1, r1, #4
 8001736:	1841      	adds	r1, r0, r1
 8001738:	18cb      	adds	r3, r1, r3
 800173a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3303      	adds	r3, #3
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	061a      	lsls	r2, r3, #24
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3302      	adds	r3, #2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	041b      	lsls	r3, r3, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3301      	adds	r3, #1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	021b      	lsls	r3, r3, #8
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	0019      	movs	r1, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	6979      	ldr	r1, [r7, #20]
 8001766:	23c4      	movs	r3, #196	; 0xc4
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	0109      	lsls	r1, r1, #4
 800176c:	1841      	adds	r1, r0, r1
 800176e:	18cb      	adds	r3, r1, r3
 8001770:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	3218      	adds	r2, #24
 800177a:	0112      	lsls	r2, r2, #4
 800177c:	58d2      	ldr	r2, [r2, r3]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2101      	movs	r1, #1
 8001784:	4311      	orrs	r1, r2
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	3218      	adds	r2, #24
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e010      	b.n	80017b4 <HAL_CAN_AddTxMessage+0x1b4>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2280      	movs	r2, #128	; 0x80
 8001798:	0392      	lsls	r2, r2, #14
 800179a:	431a      	orrs	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_AddTxMessage+0x1b4>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	02d2      	lsls	r2, r2, #11
 80017ac:	431a      	orrs	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
  }
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b008      	add	sp, #32
 80017ba:	bd80      	pop	{r7, pc}

080017bc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
 80017c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017ca:	2017      	movs	r0, #23
 80017cc:	183b      	adds	r3, r7, r0
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	2120      	movs	r1, #32
 80017d2:	5c52      	ldrb	r2, [r2, r1]
 80017d4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80017d6:	0002      	movs	r2, r0
 80017d8:	18bb      	adds	r3, r7, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d004      	beq.n	80017ea <HAL_CAN_GetRxMessage+0x2e>
 80017e0:	18bb      	adds	r3, r7, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d000      	beq.n	80017ea <HAL_CAN_GetRxMessage+0x2e>
 80017e8:	e0f8      	b.n	80019dc <HAL_CAN_GetRxMessage+0x220>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d10e      	bne.n	800180e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2203      	movs	r2, #3
 80017f8:	4013      	ands	r3, r2
 80017fa:	d117      	bne.n	800182c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	2280      	movs	r2, #128	; 0x80
 8001802:	0392      	lsls	r2, r2, #14
 8001804:	431a      	orrs	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e0ee      	b.n	80019ec <HAL_CAN_GetRxMessage+0x230>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2203      	movs	r2, #3
 8001816:	4013      	ands	r3, r2
 8001818:	d108      	bne.n	800182c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0392      	lsls	r2, r2, #14
 8001822:	431a      	orrs	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0df      	b.n	80019ec <HAL_CAN_GetRxMessage+0x230>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	321b      	adds	r2, #27
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	58d3      	ldr	r3, [r2, r3]
 8001838:	2204      	movs	r2, #4
 800183a:	401a      	ands	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d10b      	bne.n	8001860 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	321b      	adds	r2, #27
 8001850:	0112      	lsls	r2, r2, #4
 8001852:	58d3      	ldr	r3, [r2, r3]
 8001854:	0d5b      	lsrs	r3, r3, #21
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	0d5a      	lsrs	r2, r3, #21
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	e00a      	b.n	8001876 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	321b      	adds	r2, #27
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	58d3      	ldr	r3, [r2, r3]
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	08da      	lsrs	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	321b      	adds	r2, #27
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	58d3      	ldr	r3, [r2, r3]
 8001882:	2202      	movs	r2, #2
 8001884:	401a      	ands	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	331b      	adds	r3, #27
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	18d3      	adds	r3, r2, r3
 8001896:	3304      	adds	r3, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	220f      	movs	r2, #15
 800189c:	401a      	ands	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	331b      	adds	r3, #27
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	18d3      	adds	r3, r2, r3
 80018ae:	3304      	adds	r3, #4
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	401a      	ands	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	331b      	adds	r3, #27
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	18d3      	adds	r3, r2, r3
 80018c8:	3304      	adds	r3, #4
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0c1b      	lsrs	r3, r3, #16
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	0c1a      	lsrs	r2, r3, #16
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6819      	ldr	r1, [r3, #0]
 80018da:	68ba      	ldr	r2, [r7, #8]
 80018dc:	23dc      	movs	r3, #220	; 0xdc
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	188a      	adds	r2, r1, r2
 80018e4:	18d3      	adds	r3, r2, r3
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	68ba      	ldr	r2, [r7, #8]
 80018f4:	23dc      	movs	r3, #220	; 0xdc
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	188a      	adds	r2, r1, r2
 80018fc:	18d3      	adds	r3, r2, r3
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	0a1a      	lsrs	r2, r3, #8
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6819      	ldr	r1, [r3, #0]
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	23dc      	movs	r3, #220	; 0xdc
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	0112      	lsls	r2, r2, #4
 8001916:	188a      	adds	r2, r1, r2
 8001918:	18d3      	adds	r3, r2, r3
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c1a      	lsrs	r2, r3, #16
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	3302      	adds	r3, #2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6819      	ldr	r1, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	23dc      	movs	r3, #220	; 0xdc
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	188a      	adds	r2, r1, r2
 8001934:	18d3      	adds	r3, r2, r3
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0e1a      	lsrs	r2, r3, #24
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3303      	adds	r3, #3
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6819      	ldr	r1, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	23de      	movs	r3, #222	; 0xde
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	0112      	lsls	r2, r2, #4
 800194e:	188a      	adds	r2, r1, r2
 8001950:	18d3      	adds	r3, r2, r3
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	3304      	adds	r3, #4
 8001958:	b2d2      	uxtb	r2, r2
 800195a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	23de      	movs	r3, #222	; 0xde
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	188a      	adds	r2, r1, r2
 800196a:	18d3      	adds	r3, r2, r3
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0a1a      	lsrs	r2, r3, #8
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3305      	adds	r3, #5
 8001974:	b2d2      	uxtb	r2, r2
 8001976:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	23de      	movs	r3, #222	; 0xde
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	0112      	lsls	r2, r2, #4
 8001984:	188a      	adds	r2, r1, r2
 8001986:	18d3      	adds	r3, r2, r3
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0c1a      	lsrs	r2, r3, #16
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3306      	adds	r3, #6
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6819      	ldr	r1, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	23de      	movs	r3, #222	; 0xde
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	188a      	adds	r2, r1, r2
 80019a2:	18d3      	adds	r3, r2, r3
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0e1a      	lsrs	r2, r3, #24
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3307      	adds	r3, #7
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d108      	bne.n	80019c8 <HAL_CAN_GetRxMessage+0x20c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68da      	ldr	r2, [r3, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2120      	movs	r1, #32
 80019c2:	430a      	orrs	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e007      	b.n	80019d8 <HAL_CAN_GetRxMessage+0x21c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2120      	movs	r1, #32
 80019d4:	430a      	orrs	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	e007      	b.n	80019ec <HAL_CAN_GetRxMessage+0x230>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	02d2      	lsls	r2, r2, #11
 80019e4:	431a      	orrs	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
  }
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b006      	add	sp, #24
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80019fe:	200f      	movs	r0, #15
 8001a00:	183b      	adds	r3, r7, r0
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	2120      	movs	r1, #32
 8001a06:	5c52      	ldrb	r2, [r2, r1]
 8001a08:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a0a:	0002      	movs	r2, r0
 8001a0c:	18bb      	adds	r3, r7, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d003      	beq.n	8001a1c <HAL_CAN_ActivateNotification+0x28>
 8001a14:	18bb      	adds	r3, r7, r2
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d109      	bne.n	8001a30 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6959      	ldr	r1, [r3, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e007      	b.n	8001a40 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a34:	2280      	movs	r2, #128	; 0x80
 8001a36:	02d2      	lsls	r2, r2, #11
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
  }
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b004      	add	sp, #16
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a50:	2300      	movs	r3, #0
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2201      	movs	r2, #1
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <HAL_CAN_IRQHandler+0x46>
 8001a8c:	e084      	b.n	8001b98 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2201      	movs	r2, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d024      	beq.n	8001ae0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	d004      	beq.n	8001ab0 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f981 	bl	8001db0 <HAL_CAN_TxMailbox0CompleteCallback>
 8001aae:	e017      	b.n	8001ae0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d005      	beq.n	8001ac4 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	e00d      	b.n	8001ae0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d005      	beq.n	8001ad8 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	2280      	movs	r2, #128	; 0x80
 8001ad0:	0152      	lsls	r2, r2, #5
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e003      	b.n	8001ae0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f000 f980 	bl	8001de0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d028      	beq.n	8001b3c <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	0052      	lsls	r2, r2, #1
 8001af2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d004      	beq.n	8001b08 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	0018      	movs	r0, r3
 8001b02:	f000 f95d 	bl	8001dc0 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b06:	e019      	b.n	8001b3c <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	2380      	movs	r3, #128	; 0x80
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d005      	beq.n	8001b1e <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0192      	lsls	r2, r2, #6
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1c:	e00e      	b.n	8001b3c <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	011b      	lsls	r3, r3, #4
 8001b24:	4013      	ands	r3, r2
 8001b26:	d005      	beq.n	8001b34 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	01d2      	lsls	r2, r2, #7
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
 8001b32:	e003      	b.n	8001b3c <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 f95a 	bl	8001df0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	025b      	lsls	r3, r3, #9
 8001b42:	4013      	ands	r3, r2
 8001b44:	d028      	beq.n	8001b98 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2280      	movs	r2, #128	; 0x80
 8001b4c:	0252      	lsls	r2, r2, #9
 8001b4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	2380      	movs	r3, #128	; 0x80
 8001b54:	029b      	lsls	r3, r3, #10
 8001b56:	4013      	ands	r3, r2
 8001b58:	d004      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 f937 	bl	8001dd0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001b62:	e019      	b.n	8001b98 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	02db      	lsls	r3, r3, #11
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d005      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	2280      	movs	r2, #128	; 0x80
 8001b72:	0212      	lsls	r2, r2, #8
 8001b74:	4313      	orrs	r3, r2
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
 8001b78:	e00e      	b.n	8001b98 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	031b      	lsls	r3, r3, #12
 8001b80:	4013      	ands	r3, r2
 8001b82:	d005      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	2280      	movs	r2, #128	; 0x80
 8001b88:	0252      	lsls	r2, r2, #9
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8e:	e003      	b.n	8001b98 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 f934 	bl	8001e00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001b98:	6a3b      	ldr	r3, [r7, #32]
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d00c      	beq.n	8001bba <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d008      	beq.n	8001bba <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bba:	6a3b      	ldr	r3, [r7, #32]
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d00b      	beq.n	8001bda <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2208      	movs	r2, #8
 8001bd0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f91b 	bl	8001e10 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	2202      	movs	r2, #2
 8001bde:	4013      	ands	r3, r2
 8001be0:	d009      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2203      	movs	r2, #3
 8001bea:	4013      	ands	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe fbfd 	bl	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
 8001bf8:	2240      	movs	r2, #64	; 0x40
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d00c      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2210      	movs	r2, #16
 8001c02:	4013      	ands	r3, r2
 8001c04:	d008      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	2280      	movs	r2, #128	; 0x80
 8001c0a:	00d2      	lsls	r2, r2, #3
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2210      	movs	r2, #16
 8001c16:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d00b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2208      	movs	r2, #8
 8001c24:	4013      	ands	r3, r2
 8001c26:	d007      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2208      	movs	r2, #8
 8001c2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 f8fc 	bl	8001e30 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	2210      	movs	r2, #16
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	d009      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2203      	movs	r2, #3
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d003      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 f8e6 	bl	8001e20 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d00b      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	2210      	movs	r2, #16
 8001c62:	4013      	ands	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f000 f8e5 	bl	8001e40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001c76:	6a3a      	ldr	r2, [r7, #32]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	025b      	lsls	r3, r3, #9
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d00b      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2208      	movs	r2, #8
 8001c84:	4013      	ands	r3, r2
 8001c86:	d007      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 f8dc 	bl	8001e50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c98:	6a3a      	ldr	r2, [r7, #32]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d100      	bne.n	8001ca4 <HAL_CAN_IRQHandler+0x25c>
 8001ca2:	e074      	b.n	8001d8e <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d100      	bne.n	8001cae <HAL_CAN_IRQHandler+0x266>
 8001cac:	e06b      	b.n	8001d86 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cae:	6a3a      	ldr	r2, [r7, #32]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cbe:	d003      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	2380      	movs	r3, #128	; 0x80
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001cd8:	d003      	beq.n	8001ce2 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ce2:	6a3a      	ldr	r2, [r7, #32]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d007      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001cf2:	d003      	beq.n	8001cfc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	4013      	ands	r3, r2
 8001d04:	d03f      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2270      	movs	r2, #112	; 0x70
 8001d0a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d0c:	d03b      	beq.n	8001d86 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2270      	movs	r2, #112	; 0x70
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b60      	cmp	r3, #96	; 0x60
 8001d16:	d027      	beq.n	8001d68 <HAL_CAN_IRQHandler+0x320>
 8001d18:	d82c      	bhi.n	8001d74 <HAL_CAN_IRQHandler+0x32c>
 8001d1a:	2b50      	cmp	r3, #80	; 0x50
 8001d1c:	d01f      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x316>
 8001d1e:	d829      	bhi.n	8001d74 <HAL_CAN_IRQHandler+0x32c>
 8001d20:	2b40      	cmp	r3, #64	; 0x40
 8001d22:	d017      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x30c>
 8001d24:	d826      	bhi.n	8001d74 <HAL_CAN_IRQHandler+0x32c>
 8001d26:	2b30      	cmp	r3, #48	; 0x30
 8001d28:	d00f      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x302>
 8001d2a:	d823      	bhi.n	8001d74 <HAL_CAN_IRQHandler+0x32c>
 8001d2c:	2b10      	cmp	r3, #16
 8001d2e:	d002      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x2ee>
 8001d30:	2b20      	cmp	r3, #32
 8001d32:	d005      	beq.n	8001d40 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d34:	e01e      	b.n	8001d74 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d3e:	e01a      	b.n	8001d76 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	2210      	movs	r2, #16
 8001d44:	4313      	orrs	r3, r2
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d48:	e015      	b.n	8001d76 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d52:	e010      	b.n	8001d76 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	2240      	movs	r2, #64	; 0x40
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d5c:	e00b      	b.n	8001d76 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	4313      	orrs	r3, r2
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d66:	e006      	b.n	8001d76 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	2280      	movs	r2, #128	; 0x80
 8001d6c:	0052      	lsls	r2, r2, #1
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001d72:	e000      	b.n	8001d76 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001d74:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2170      	movs	r1, #112	; 0x70
 8001d82:	438a      	bics	r2, r1
 8001d84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d009      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	0018      	movs	r0, r3
 8001da4:	f000 f85c 	bl	8001e60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001da8:	46c0      	nop			; (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b00a      	add	sp, #40	; 0x28
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001db8:	46c0      	nop			; (mov r8, r8)
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001dd8:	46c0      	nop			; (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001de8:	46c0      	nop			; (mov r8, r8)
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b002      	add	sp, #8
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b002      	add	sp, #8
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	b002      	add	sp, #8
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e28:	46c0      	nop			; (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b002      	add	sp, #8
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001e58:	46c0      	nop			; (mov r8, r8)
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	b002      	add	sp, #8
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e68:	46c0      	nop			; (mov r8, r8)
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	b002      	add	sp, #8
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	0002      	movs	r2, r0
 8001e78:	1dfb      	adds	r3, r7, #7
 8001e7a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e7c:	1dfb      	adds	r3, r7, #7
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b7f      	cmp	r3, #127	; 0x7f
 8001e82:	d809      	bhi.n	8001e98 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e84:	1dfb      	adds	r3, r7, #7
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	001a      	movs	r2, r3
 8001e8a:	231f      	movs	r3, #31
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <__NVIC_EnableIRQ+0x30>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	4091      	lsls	r1, r2
 8001e94:	000a      	movs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
  }
}
 8001e98:	46c0      	nop			; (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b590      	push	{r4, r7, lr}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	0002      	movs	r2, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	1dfb      	adds	r3, r7, #7
 8001eb0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001eb2:	1dfb      	adds	r3, r7, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001eb8:	d828      	bhi.n	8001f0c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001eba:	4a2f      	ldr	r2, [pc, #188]	; (8001f78 <__NVIC_SetPriority+0xd4>)
 8001ebc:	1dfb      	adds	r3, r7, #7
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	089b      	lsrs	r3, r3, #2
 8001ec4:	33c0      	adds	r3, #192	; 0xc0
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	589b      	ldr	r3, [r3, r2]
 8001eca:	1dfa      	adds	r2, r7, #7
 8001ecc:	7812      	ldrb	r2, [r2, #0]
 8001ece:	0011      	movs	r1, r2
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	400a      	ands	r2, r1
 8001ed4:	00d2      	lsls	r2, r2, #3
 8001ed6:	21ff      	movs	r1, #255	; 0xff
 8001ed8:	4091      	lsls	r1, r2
 8001eda:	000a      	movs	r2, r1
 8001edc:	43d2      	mvns	r2, r2
 8001ede:	401a      	ands	r2, r3
 8001ee0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	019b      	lsls	r3, r3, #6
 8001ee6:	22ff      	movs	r2, #255	; 0xff
 8001ee8:	401a      	ands	r2, r3
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	0018      	movs	r0, r3
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	4003      	ands	r3, r0
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef8:	481f      	ldr	r0, [pc, #124]	; (8001f78 <__NVIC_SetPriority+0xd4>)
 8001efa:	1dfb      	adds	r3, r7, #7
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b25b      	sxtb	r3, r3
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	430a      	orrs	r2, r1
 8001f04:	33c0      	adds	r3, #192	; 0xc0
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f0a:	e031      	b.n	8001f70 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f0c:	4a1b      	ldr	r2, [pc, #108]	; (8001f7c <__NVIC_SetPriority+0xd8>)
 8001f0e:	1dfb      	adds	r3, r7, #7
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	0019      	movs	r1, r3
 8001f14:	230f      	movs	r3, #15
 8001f16:	400b      	ands	r3, r1
 8001f18:	3b08      	subs	r3, #8
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3306      	adds	r3, #6
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	18d3      	adds	r3, r2, r3
 8001f22:	3304      	adds	r3, #4
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	1dfa      	adds	r2, r7, #7
 8001f28:	7812      	ldrb	r2, [r2, #0]
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	400a      	ands	r2, r1
 8001f30:	00d2      	lsls	r2, r2, #3
 8001f32:	21ff      	movs	r1, #255	; 0xff
 8001f34:	4091      	lsls	r1, r2
 8001f36:	000a      	movs	r2, r1
 8001f38:	43d2      	mvns	r2, r2
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	019b      	lsls	r3, r3, #6
 8001f42:	22ff      	movs	r2, #255	; 0xff
 8001f44:	401a      	ands	r2, r3
 8001f46:	1dfb      	adds	r3, r7, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	4003      	ands	r3, r0
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <__NVIC_SetPriority+0xd8>)
 8001f56:	1dfb      	adds	r3, r7, #7
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	001c      	movs	r4, r3
 8001f5c:	230f      	movs	r3, #15
 8001f5e:	4023      	ands	r3, r4
 8001f60:	3b08      	subs	r3, #8
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	430a      	orrs	r2, r1
 8001f66:	3306      	adds	r3, #6
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	18c3      	adds	r3, r0, r3
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	601a      	str	r2, [r3, #0]
}
 8001f70:	46c0      	nop			; (mov r8, r8)
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b003      	add	sp, #12
 8001f76:	bd90      	pop	{r4, r7, pc}
 8001f78:	e000e100 	.word	0xe000e100
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	2380      	movs	r3, #128	; 0x80
 8001f8e:	045b      	lsls	r3, r3, #17
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d301      	bcc.n	8001f98 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f94:	2301      	movs	r3, #1
 8001f96:	e010      	b.n	8001fba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f98:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <SysTick_Config+0x44>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	3a01      	subs	r2, #1
 8001f9e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	2103      	movs	r1, #3
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff ff7c 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <SysTick_Config+0x44>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <SysTick_Config+0x44>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60b9      	str	r1, [r7, #8]
 8001fd0:	607a      	str	r2, [r7, #4]
 8001fd2:	210f      	movs	r1, #15
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	1c02      	adds	r2, r0, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	46c0      	nop			; (mov r8, r8)
 8001fec:	46bd      	mov	sp, r7
 8001fee:	b004      	add	sp, #16
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b25b      	sxtb	r3, r3
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff ff33 	bl	8001e70 <__NVIC_EnableIRQ>
}
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f7ff ffaf 	bl	8001f80 <SysTick_Config>
 8002022:	0003      	movs	r3, r0
}
 8002024:	0018      	movs	r0, r3
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002034:	210f      	movs	r1, #15
 8002036:	187b      	adds	r3, r7, r1
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2221      	movs	r2, #33	; 0x21
 8002040:	5c9b      	ldrb	r3, [r3, r2]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d006      	beq.n	8002056 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2204      	movs	r2, #4
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800204e:	187b      	adds	r3, r7, r1
 8002050:	2201      	movs	r2, #1
 8002052:	701a      	strb	r2, [r3, #0]
 8002054:	e028      	b.n	80020a8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	210e      	movs	r1, #14
 8002062:	438a      	bics	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	438a      	bics	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	2101      	movs	r1, #1
 8002080:	4091      	lsls	r1, r2
 8002082:	000a      	movs	r2, r1
 8002084:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2221      	movs	r2, #33	; 0x21
 800208a:	2101      	movs	r1, #1
 800208c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	2100      	movs	r1, #0
 8002094:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209a:	2b00      	cmp	r3, #0
 800209c:	d004      	beq.n	80020a8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	0010      	movs	r0, r2
 80020a6:	4798      	blx	r3
    } 
  }
  return status;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	781b      	ldrb	r3, [r3, #0]
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2221      	movs	r2, #33	; 0x21
 80020c2:	5c9b      	ldrb	r3, [r3, r2]
 80020c4:	b2db      	uxtb	r3, r3
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	e149      	b.n	8002374 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2101      	movs	r1, #1
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4091      	lsls	r1, r2
 80020ea:	000a      	movs	r2, r1
 80020ec:	4013      	ands	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d100      	bne.n	80020f8 <HAL_GPIO_Init+0x28>
 80020f6:	e13a      	b.n	800236e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2203      	movs	r2, #3
 80020fe:	4013      	ands	r3, r2
 8002100:	2b01      	cmp	r3, #1
 8002102:	d005      	beq.n	8002110 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2203      	movs	r2, #3
 800210a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800210c:	2b02      	cmp	r3, #2
 800210e:	d130      	bne.n	8002172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	409a      	lsls	r2, r3
 800211e:	0013      	movs	r3, r2
 8002120:	43da      	mvns	r2, r3
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4013      	ands	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	409a      	lsls	r2, r3
 8002132:	0013      	movs	r3, r2
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	693a      	ldr	r2, [r7, #16]
 800213e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002146:	2201      	movs	r2, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
 800214c:	0013      	movs	r3, r2
 800214e:	43da      	mvns	r2, r3
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	091b      	lsrs	r3, r3, #4
 800215c:	2201      	movs	r2, #1
 800215e:	401a      	ands	r2, r3
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2203      	movs	r2, #3
 8002178:	4013      	ands	r3, r2
 800217a:	2b03      	cmp	r3, #3
 800217c:	d017      	beq.n	80021ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	2203      	movs	r2, #3
 800218a:	409a      	lsls	r2, r3
 800218c:	0013      	movs	r3, r2
 800218e:	43da      	mvns	r2, r3
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	4013      	ands	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	689a      	ldr	r2, [r3, #8]
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	409a      	lsls	r2, r3
 80021a0:	0013      	movs	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d123      	bne.n	8002202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	58d3      	ldr	r3, [r2, r3]
 80021c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2207      	movs	r2, #7
 80021cc:	4013      	ands	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	691a      	ldr	r2, [r3, #16]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2107      	movs	r1, #7
 80021e6:	400b      	ands	r3, r1
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	08da      	lsrs	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3208      	adds	r2, #8
 80021fc:	0092      	lsls	r2, r2, #2
 80021fe:	6939      	ldr	r1, [r7, #16]
 8002200:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	2203      	movs	r2, #3
 800220e:	409a      	lsls	r2, r3
 8002210:	0013      	movs	r3, r2
 8002212:	43da      	mvns	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2203      	movs	r2, #3
 8002220:	401a      	ands	r2, r3
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	23c0      	movs	r3, #192	; 0xc0
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	4013      	ands	r3, r2
 8002240:	d100      	bne.n	8002244 <HAL_GPIO_Init+0x174>
 8002242:	e094      	b.n	800236e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002244:	4b51      	ldr	r3, [pc, #324]	; (800238c <HAL_GPIO_Init+0x2bc>)
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	4b50      	ldr	r3, [pc, #320]	; (800238c <HAL_GPIO_Init+0x2bc>)
 800224a:	2101      	movs	r1, #1
 800224c:	430a      	orrs	r2, r1
 800224e:	619a      	str	r2, [r3, #24]
 8002250:	4b4e      	ldr	r3, [pc, #312]	; (800238c <HAL_GPIO_Init+0x2bc>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800225c:	4a4c      	ldr	r2, [pc, #304]	; (8002390 <HAL_GPIO_Init+0x2c0>)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	089b      	lsrs	r3, r3, #2
 8002262:	3302      	adds	r3, #2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	589b      	ldr	r3, [r3, r2]
 8002268:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2203      	movs	r2, #3
 800226e:	4013      	ands	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	409a      	lsls	r2, r3
 8002276:	0013      	movs	r3, r2
 8002278:	43da      	mvns	r2, r3
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4013      	ands	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	2390      	movs	r3, #144	; 0x90
 8002284:	05db      	lsls	r3, r3, #23
 8002286:	429a      	cmp	r2, r3
 8002288:	d00d      	beq.n	80022a6 <HAL_GPIO_Init+0x1d6>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a41      	ldr	r2, [pc, #260]	; (8002394 <HAL_GPIO_Init+0x2c4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d007      	beq.n	80022a2 <HAL_GPIO_Init+0x1d2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a40      	ldr	r2, [pc, #256]	; (8002398 <HAL_GPIO_Init+0x2c8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d101      	bne.n	800229e <HAL_GPIO_Init+0x1ce>
 800229a:	2302      	movs	r3, #2
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x1d8>
 800229e:	2305      	movs	r3, #5
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x1d8>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x1d8>
 80022a6:	2300      	movs	r3, #0
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	2103      	movs	r1, #3
 80022ac:	400a      	ands	r2, r1
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	; (8002390 <HAL_GPIO_Init+0x2c0>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c6:	4b35      	ldr	r3, [pc, #212]	; (800239c <HAL_GPIO_Init+0x2cc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43da      	mvns	r2, r3
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	025b      	lsls	r3, r3, #9
 80022de:	4013      	ands	r3, r2
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022ea:	4b2c      	ldr	r3, [pc, #176]	; (800239c <HAL_GPIO_Init+0x2cc>)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80022f0:	4b2a      	ldr	r3, [pc, #168]	; (800239c <HAL_GPIO_Init+0x2cc>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	43da      	mvns	r2, r3
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002314:	4b21      	ldr	r3, [pc, #132]	; (800239c <HAL_GPIO_Init+0x2cc>)
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b20      	ldr	r3, [pc, #128]	; (800239c <HAL_GPIO_Init+0x2cc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	43da      	mvns	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685a      	ldr	r2, [r3, #4]
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	035b      	lsls	r3, r3, #13
 8002332:	4013      	ands	r3, r2
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800233e:	4b17      	ldr	r3, [pc, #92]	; (800239c <HAL_GPIO_Init+0x2cc>)
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002344:	4b15      	ldr	r3, [pc, #84]	; (800239c <HAL_GPIO_Init+0x2cc>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43da      	mvns	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	2380      	movs	r3, #128	; 0x80
 800235a:	039b      	lsls	r3, r3, #14
 800235c:	4013      	ands	r3, r2
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <HAL_GPIO_Init+0x2cc>)
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	3301      	adds	r3, #1
 8002372:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	40da      	lsrs	r2, r3
 800237c:	1e13      	subs	r3, r2, #0
 800237e:	d000      	beq.n	8002382 <HAL_GPIO_Init+0x2b2>
 8002380:	e6ae      	b.n	80020e0 <HAL_GPIO_Init+0x10>
  } 
}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46c0      	nop			; (mov r8, r8)
 8002386:	46bd      	mov	sp, r7
 8002388:	b006      	add	sp, #24
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	40010000 	.word	0x40010000
 8002394:	48000400 	.word	0x48000400
 8002398:	48000800 	.word	0x48000800
 800239c:	40010400 	.word	0x40010400

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	0008      	movs	r0, r1
 80023aa:	0011      	movs	r1, r2
 80023ac:	1cbb      	adds	r3, r7, #2
 80023ae:	1c02      	adds	r2, r0, #0
 80023b0:	801a      	strh	r2, [r3, #0]
 80023b2:	1c7b      	adds	r3, r7, #1
 80023b4:	1c0a      	adds	r2, r1, #0
 80023b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023b8:	1c7b      	adds	r3, r7, #1
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c0:	1cbb      	adds	r3, r7, #2
 80023c2:	881a      	ldrh	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023c8:	e003      	b.n	80023d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ca:	1cbb      	adds	r3, r7, #2
 80023cc:	881a      	ldrh	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d2:	46c0      	nop			; (mov r8, r8)
 80023d4:	46bd      	mov	sp, r7
 80023d6:	b002      	add	sp, #8
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	000a      	movs	r2, r1
 80023e4:	1cbb      	adds	r3, r7, #2
 80023e6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4013      	ands	r3, r2
 80023f6:	041a      	lsls	r2, r3, #16
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	1cb9      	adds	r1, r7, #2
 80023fe:	8809      	ldrh	r1, [r1, #0]
 8002400:	400b      	ands	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b004      	add	sp, #16
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e082      	b.n	8002528 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2241      	movs	r2, #65	; 0x41
 8002426:	5c9b      	ldrb	r3, [r3, r2]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d107      	bne.n	800243e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	2100      	movs	r1, #0
 8002434:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f7fe fbf5 	bl	8000c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2241      	movs	r2, #65	; 0x41
 8002442:	2124      	movs	r1, #36	; 0x24
 8002444:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2101      	movs	r1, #1
 8002452:	438a      	bics	r2, r1
 8002454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4934      	ldr	r1, [pc, #208]	; (8002530 <HAL_I2C_Init+0x120>)
 8002460:	400a      	ands	r2, r1
 8002462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4931      	ldr	r1, [pc, #196]	; (8002534 <HAL_I2C_Init+0x124>)
 8002470:	400a      	ands	r2, r1
 8002472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	0209      	lsls	r1, r1, #8
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	e007      	b.n	800249e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2184      	movs	r1, #132	; 0x84
 8002498:	0209      	lsls	r1, r1, #8
 800249a:	430a      	orrs	r2, r1
 800249c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d104      	bne.n	80024b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	0112      	lsls	r2, r2, #4
 80024ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	491f      	ldr	r1, [pc, #124]	; (8002538 <HAL_I2C_Init+0x128>)
 80024bc:	430a      	orrs	r2, r1
 80024be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	491a      	ldr	r1, [pc, #104]	; (8002534 <HAL_I2C_Init+0x124>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	431a      	orrs	r2, r3
 80024da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69d9      	ldr	r1, [r3, #28]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1a      	ldr	r2, [r3, #32]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2101      	movs	r1, #1
 8002506:	430a      	orrs	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	2120      	movs	r1, #32
 8002516:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2242      	movs	r2, #66	; 0x42
 8002522:	2100      	movs	r1, #0
 8002524:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b002      	add	sp, #8
 800252e:	bd80      	pop	{r7, pc}
 8002530:	f0ffffff 	.word	0xf0ffffff
 8002534:	ffff7fff 	.word	0xffff7fff
 8002538:	02008000 	.word	0x02008000

0800253c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	0008      	movs	r0, r1
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	0019      	movs	r1, r3
 800254a:	230a      	movs	r3, #10
 800254c:	18fb      	adds	r3, r7, r3
 800254e:	1c02      	adds	r2, r0, #0
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	2308      	movs	r3, #8
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	1c0a      	adds	r2, r1, #0
 8002558:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2241      	movs	r2, #65	; 0x41
 800255e:	5c9b      	ldrb	r3, [r3, r2]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d15b      	bne.n	800261e <HAL_I2C_Master_Transmit_IT+0xe2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699a      	ldr	r2, [r3, #24]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	401a      	ands	r2, r3
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	021b      	lsls	r3, r3, #8
 8002576:	429a      	cmp	r2, r3
 8002578:	d101      	bne.n	800257e <HAL_I2C_Master_Transmit_IT+0x42>
    {
      return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
 800257c:	e050      	b.n	8002620 <HAL_I2C_Master_Transmit_IT+0xe4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2240      	movs	r2, #64	; 0x40
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d101      	bne.n	800258c <HAL_I2C_Master_Transmit_IT+0x50>
 8002588:	2302      	movs	r3, #2
 800258a:	e049      	b.n	8002620 <HAL_I2C_Master_Transmit_IT+0xe4>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	2101      	movs	r1, #1
 8002592:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2241      	movs	r2, #65	; 0x41
 8002598:	2121      	movs	r1, #33	; 0x21
 800259a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2242      	movs	r2, #66	; 0x42
 80025a0:	2110      	movs	r1, #16
 80025a2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2208      	movs	r2, #8
 80025b4:	18ba      	adds	r2, r7, r2
 80025b6:	8812      	ldrh	r2, [r2, #0]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a1a      	ldr	r2, [pc, #104]	; (8002628 <HAL_I2C_Master_Transmit_IT+0xec>)
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a1a      	ldr	r2, [pc, #104]	; (800262c <HAL_I2C_Master_Transmit_IT+0xf0>)
 80025c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	2bff      	cmp	r3, #255	; 0xff
 80025ce:	d906      	bls.n	80025de <HAL_I2C_Master_Transmit_IT+0xa2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	22ff      	movs	r2, #255	; 0xff
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	045b      	lsls	r3, r3, #17
 80025da:	617b      	str	r3, [r7, #20]
 80025dc:	e007      	b.n	80025ee <HAL_I2C_Master_Transmit_IT+0xb2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	049b      	lsls	r3, r3, #18
 80025ec:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	697c      	ldr	r4, [r7, #20]
 80025f6:	230a      	movs	r3, #10
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	8819      	ldrh	r1, [r3, #0]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	4b0c      	ldr	r3, [pc, #48]	; (8002630 <HAL_I2C_Master_Transmit_IT+0xf4>)
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	0023      	movs	r3, r4
 8002604:	f001 fa2a 	bl	8003a5c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2101      	movs	r1, #1
 8002614:	0018      	movs	r0, r3
 8002616:	f001 fa57 	bl	8003ac8 <I2C_Enable_IRQ>

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2C_Master_Transmit_IT+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	b007      	add	sp, #28
 8002626:	bd90      	pop	{r4, r7, pc}
 8002628:	ffff0000 	.word	0xffff0000
 800262c:	080027dd 	.word	0x080027dd
 8002630:	80002000 	.word	0x80002000

08002634 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	68f9      	ldr	r1, [r7, #12]
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	4798      	blx	r3
  }
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b004      	add	sp, #16
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	001a      	movs	r2, r3
 8002686:	2301      	movs	r3, #1
 8002688:	4013      	ands	r3, r2
 800268a:	d010      	beq.n	80026ae <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	09db      	lsrs	r3, r3, #7
 8002690:	001a      	movs	r2, r3
 8002692:	2301      	movs	r3, #1
 8002694:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002696:	d00a      	beq.n	80026ae <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	2201      	movs	r2, #1
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2280      	movs	r2, #128	; 0x80
 80026aa:	0052      	lsls	r2, r2, #1
 80026ac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	0a9b      	lsrs	r3, r3, #10
 80026b2:	001a      	movs	r2, r3
 80026b4:	2301      	movs	r3, #1
 80026b6:	4013      	ands	r3, r2
 80026b8:	d010      	beq.n	80026dc <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	09db      	lsrs	r3, r3, #7
 80026be:	001a      	movs	r2, r3
 80026c0:	2301      	movs	r3, #1
 80026c2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80026c4:	d00a      	beq.n	80026dc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	2208      	movs	r2, #8
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	00d2      	lsls	r2, r2, #3
 80026da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	0a5b      	lsrs	r3, r3, #9
 80026e0:	001a      	movs	r2, r3
 80026e2:	2301      	movs	r3, #1
 80026e4:	4013      	ands	r3, r2
 80026e6:	d010      	beq.n	800270a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	09db      	lsrs	r3, r3, #7
 80026ec:	001a      	movs	r2, r3
 80026ee:	2301      	movs	r3, #1
 80026f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80026f2:	d00a      	beq.n	800270a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2202      	movs	r2, #2
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	220b      	movs	r2, #11
 8002714:	4013      	ands	r3, r2
 8002716:	d005      	beq.n	8002724 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f001 f850 	bl	80037c4 <I2C_ITError>
  }
}
 8002724:	46c0      	nop			; (mov r8, r8)
 8002726:	46bd      	mov	sp, r7
 8002728:	b006      	add	sp, #24
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002734:	46c0      	nop			; (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002754:	46c0      	nop			; (mov r8, r8)
 8002756:	46bd      	mov	sp, r7
 8002758:	b002      	add	sp, #8
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}

0800276c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	0008      	movs	r0, r1
 8002776:	0011      	movs	r1, r2
 8002778:	1cfb      	adds	r3, r7, #3
 800277a:	1c02      	adds	r2, r0, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	003b      	movs	r3, r7
 8002780:	1c0a      	adds	r2, r1, #0
 8002782:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002794:	46c0      	nop			; (mov r8, r8)
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80027c4:	46c0      	nop			; (mov r8, r8)
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b002      	add	sp, #8
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b002      	add	sp, #8
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80027dc:	b590      	push	{r4, r7, lr}
 80027de:	b089      	sub	sp, #36	; 0x24
 80027e0:	af02      	add	r7, sp, #8
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2240      	movs	r2, #64	; 0x40
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <I2C_Master_ISR_IT+0x1e>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e12b      	b.n	8002a52 <I2C_Master_ISR_IT+0x276>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2240      	movs	r2, #64	; 0x40
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	001a      	movs	r2, r3
 8002808:	2301      	movs	r3, #1
 800280a:	4013      	ands	r3, r2
 800280c:	d014      	beq.n	8002838 <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	001a      	movs	r2, r3
 8002814:	2301      	movs	r3, #1
 8002816:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002818:	d00e      	beq.n	8002838 <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2210      	movs	r2, #16
 8002820:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	2204      	movs	r2, #4
 8002828:	431a      	orrs	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0018      	movs	r0, r3
 8002832:	f001 f8d2 	bl	80039da <I2C_Flush_TXDR>
 8002836:	e0f5      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	001a      	movs	r2, r3
 800283e:	2301      	movs	r3, #1
 8002840:	4013      	ands	r3, r2
 8002842:	d023      	beq.n	800288c <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	001a      	movs	r2, r3
 800284a:	2301      	movs	r3, #1
 800284c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800284e:	d01d      	beq.n	800288c <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2204      	movs	r2, #4
 8002854:	4393      	bics	r3, r2
 8002856:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	1c5a      	adds	r2, r3, #1
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002880:	b29b      	uxth	r3, r3
 8002882:	3b01      	subs	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800288a:	e0cb      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	001a      	movs	r2, r3
 8002892:	2301      	movs	r3, #1
 8002894:	4013      	ands	r3, r2
 8002896:	d01e      	beq.n	80028d6 <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	001a      	movs	r2, r3
 800289e:	2301      	movs	r3, #1
 80028a0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80028a2:	d018      	beq.n	80028d6 <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	781a      	ldrb	r2, [r3, #0]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	3b01      	subs	r3, #1
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d4:	e0a6      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	09db      	lsrs	r3, r3, #7
 80028da:	001a      	movs	r2, r3
 80028dc:	2301      	movs	r3, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d100      	bne.n	80028e4 <I2C_Master_ISR_IT+0x108>
 80028e2:	e06b      	b.n	80029bc <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	001a      	movs	r2, r3
 80028ea:	2301      	movs	r3, #1
 80028ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80028ee:	d065      	beq.n	80029bc <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d04a      	beq.n	8002990 <I2C_Master_ISR_IT+0x1b4>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d146      	bne.n	8002990 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	b29a      	uxth	r2, r3
 800290a:	2112      	movs	r1, #18
 800290c:	187b      	adds	r3, r7, r1
 800290e:	0592      	lsls	r2, r2, #22
 8002910:	0d92      	lsrs	r2, r2, #22
 8002912:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	2bff      	cmp	r3, #255	; 0xff
 800291c:	d910      	bls.n	8002940 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	22ff      	movs	r2, #255	; 0xff
 8002922:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	b2da      	uxtb	r2, r3
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	045c      	lsls	r4, r3, #17
 800292e:	187b      	adds	r3, r7, r1
 8002930:	8819      	ldrh	r1, [r3, #0]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	2300      	movs	r3, #0
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	0023      	movs	r3, r4
 800293a:	f001 f88f 	bl	8003a5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800293e:	e03c      	b.n	80029ba <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	4a43      	ldr	r2, [pc, #268]	; (8002a5c <I2C_Master_ISR_IT+0x280>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800295e:	2312      	movs	r3, #18
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	8819      	ldrh	r1, [r3, #0]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	0023      	movs	r3, r4
 800296c:	f001 f876 	bl	8003a5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002970:	e023      	b.n	80029ba <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002976:	b2da      	uxtb	r2, r3
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	049c      	lsls	r4, r3, #18
 800297c:	2312      	movs	r3, #18
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	8819      	ldrh	r1, [r3, #0]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	2300      	movs	r3, #0
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	0023      	movs	r3, r4
 800298a:	f001 f867 	bl	8003a5c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800298e:	e014      	b.n	80029ba <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685a      	ldr	r2, [r3, #4]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	049b      	lsls	r3, r3, #18
 800299a:	401a      	ands	r2, r3
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	049b      	lsls	r3, r3, #18
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d004      	beq.n	80029ae <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0018      	movs	r0, r3
 80029a8:	f000 fc14 	bl	80031d4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029ac:	e03a      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2140      	movs	r1, #64	; 0x40
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 ff06 	bl	80037c4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029b8:	e034      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
 80029ba:	e033      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	099b      	lsrs	r3, r3, #6
 80029c0:	001a      	movs	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	4013      	ands	r3, r2
 80029c6:	d02d      	beq.n	8002a24 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	099b      	lsrs	r3, r3, #6
 80029cc:	001a      	movs	r2, r3
 80029ce:	2301      	movs	r3, #1
 80029d0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80029d2:	d027      	beq.n	8002a24 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d11d      	bne.n	8002a1a <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	049b      	lsls	r3, r3, #18
 80029e8:	401a      	ands	r2, r3
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	049b      	lsls	r3, r3, #18
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d018      	beq.n	8002a24 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	4a19      	ldr	r2, [pc, #100]	; (8002a5c <I2C_Master_ISR_IT+0x280>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d109      	bne.n	8002a10 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2180      	movs	r1, #128	; 0x80
 8002a08:	01c9      	lsls	r1, r1, #7
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	e009      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 fbde 	bl	80031d4 <I2C_ITMasterSeqCplt>
 8002a18:	e004      	b.n	8002a24 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 fed0 	bl	80037c4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	001a      	movs	r2, r3
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d00b      	beq.n	8002a48 <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	001a      	movs	r2, r3
 8002a36:	2301      	movs	r3, #1
 8002a38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a3a:	d005      	beq.n	8002a48 <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0011      	movs	r1, r2
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fc6e 	bl	8003324 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b007      	add	sp, #28
 8002a58:	bd90      	pop	{r4, r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	ffff0000 	.word	0xffff0000

08002a60 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a70:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	5c9b      	ldrb	r3, [r3, r2]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <I2C_Slave_ISR_IT+0x24>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e0fa      	b.n	8002c7a <I2C_Slave_ISR_IT+0x21a>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	2101      	movs	r1, #1
 8002a8a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	001a      	movs	r2, r3
 8002a92:	2301      	movs	r3, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002aa2:	d005      	beq.n	8002ab0 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fd0c 	bl	80034c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	001a      	movs	r2, r3
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d054      	beq.n	8002b66 <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ac6:	d04e      	beq.n	8002b66 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d12d      	bne.n	8002b2e <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2241      	movs	r2, #65	; 0x41
 8002ad6:	5c9b      	ldrb	r3, [r3, r2]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b28      	cmp	r3, #40	; 0x28
 8002adc:	d10b      	bne.n	8002af6 <I2C_Slave_ISR_IT+0x96>
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	049b      	lsls	r3, r3, #18
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d106      	bne.n	8002af6 <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	0011      	movs	r1, r2
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 fe0e 	bl	8003710 <I2C_ITListenCplt>
 8002af4:	e036      	b.n	8002b64 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2241      	movs	r2, #65	; 0x41
 8002afa:	5c9b      	ldrb	r3, [r3, r2]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b29      	cmp	r3, #41	; 0x29
 8002b00:	d110      	bne.n	8002b24 <I2C_Slave_ISR_IT+0xc4>
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	4a5f      	ldr	r2, [pc, #380]	; (8002c84 <I2C_Slave_ISR_IT+0x224>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00c      	beq.n	8002b24 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2210      	movs	r2, #16
 8002b10:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 ff60 	bl	80039da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 fb9b 	bl	8003258 <I2C_ITSlaveSeqCplt>
 8002b22:	e01f      	b.n	8002b64 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2210      	movs	r2, #16
 8002b2a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002b2c:	e09d      	b.n	8002c6a <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2210      	movs	r2, #16
 8002b34:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <I2C_Slave_ISR_IT+0xf4>
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	045b      	lsls	r3, r3, #17
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d000      	beq.n	8002b54 <I2C_Slave_ISR_IT+0xf4>
 8002b52:	e08a      	b.n	8002c6a <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 fe31 	bl	80037c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002b62:	e082      	b.n	8002c6a <I2C_Slave_ISR_IT+0x20a>
 8002b64:	e081      	b.n	8002c6a <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	001a      	movs	r2, r3
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d031      	beq.n	8002bd6 <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	089b      	lsrs	r3, r3, #2
 8002b76:	001a      	movs	r2, r3
 8002b78:	2301      	movs	r3, #1
 8002b7a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002b7c:	d02b      	beq.n	8002bd6 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d018      	beq.n	8002bba <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	b2d2      	uxtb	r2, r2
 8002b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9a:	1c5a      	adds	r2, r3, #1
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d154      	bne.n	8002c6e <I2C_Slave_ISR_IT+0x20e>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <I2C_Slave_ISR_IT+0x224>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d050      	beq.n	8002c6e <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f000 fb42 	bl	8003258 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002bd4:	e04b      	b.n	8002c6e <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	08db      	lsrs	r3, r3, #3
 8002bda:	001a      	movs	r2, r3
 8002bdc:	2301      	movs	r3, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	d00c      	beq.n	8002bfc <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	08db      	lsrs	r3, r3, #3
 8002be6:	001a      	movs	r2, r3
 8002be8:	2301      	movs	r3, #1
 8002bea:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002bec:	d006      	beq.n	8002bfc <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	0011      	movs	r1, r2
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f000 fa49 	bl	800308c <I2C_ITAddrCplt>
 8002bfa:	e039      	b.n	8002c70 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	085b      	lsrs	r3, r3, #1
 8002c00:	001a      	movs	r2, r3
 8002c02:	2301      	movs	r3, #1
 8002c04:	4013      	ands	r3, r2
 8002c06:	d033      	beq.n	8002c70 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	085b      	lsrs	r3, r3, #1
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2301      	movs	r3, #1
 8002c10:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c12:	d02d      	beq.n	8002c70 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d018      	beq.n	8002c50 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
 8002c4e:	e00f      	b.n	8002c70 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	045b      	lsls	r3, r3, #17
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d002      	beq.n	8002c60 <I2C_Slave_ISR_IT+0x200>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	0018      	movs	r0, r3
 8002c64:	f000 faf8 	bl	8003258 <I2C_ITSlaveSeqCplt>
 8002c68:	e002      	b.n	8002c70 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	e000      	b.n	8002c70 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002c6e:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	2100      	movs	r1, #0
 8002c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b006      	add	sp, #24
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	ffff0000 	.word	0xffff0000

08002c88 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2240      	movs	r2, #64	; 0x40
 8002c98:	5c9b      	ldrb	r3, [r3, r2]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d101      	bne.n	8002ca2 <I2C_Master_ISR_DMA+0x1a>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e0f7      	b.n	8002e92 <I2C_Master_ISR_DMA+0x20a>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2240      	movs	r2, #64	; 0x40
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	001a      	movs	r2, r3
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d019      	beq.n	8002cea <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	001a      	movs	r2, r3
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002cc0:	d013      	beq.n	8002cea <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2210      	movs	r2, #16
 8002cc8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	2204      	movs	r2, #4
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2120      	movs	r1, #32
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 fef4 	bl	8003ac8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 fe79 	bl	80039da <I2C_Flush_TXDR>
 8002ce8:	e0ce      	b.n	8002e88 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	09db      	lsrs	r3, r3, #7
 8002cee:	001a      	movs	r2, r3
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d100      	bne.n	8002cf8 <I2C_Master_ISR_DMA+0x70>
 8002cf6:	e07e      	b.n	8002df6 <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002d02:	d100      	bne.n	8002d06 <I2C_Master_ISR_DMA+0x7e>
 8002d04:	e077      	b.n	8002df6 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2140      	movs	r1, #64	; 0x40
 8002d12:	438a      	bics	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d055      	beq.n	8002dcc <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	2312      	movs	r3, #18
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	0592      	lsls	r2, r2, #22
 8002d2e:	0d92      	lsrs	r2, r2, #22
 8002d30:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	2bff      	cmp	r3, #255	; 0xff
 8002d3a:	d906      	bls.n	8002d4a <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	045b      	lsls	r3, r3, #17
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	e010      	b.n	8002d6c <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	4a50      	ldr	r2, [pc, #320]	; (8002e9c <I2C_Master_ISR_DMA+0x214>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	e002      	b.n	8002d6c <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	049b      	lsls	r3, r3, #18
 8002d6a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	697c      	ldr	r4, [r7, #20]
 8002d74:	2312      	movs	r3, #18
 8002d76:	18fb      	adds	r3, r7, r3
 8002d78:	8819      	ldrh	r1, [r3, #0]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	9300      	str	r3, [sp, #0]
 8002d80:	0023      	movs	r3, r4
 8002d82:	f000 fe6b 	bl	8003a5c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2241      	movs	r2, #65	; 0x41
 8002d9c:	5c9b      	ldrb	r3, [r3, r2]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b22      	cmp	r3, #34	; 0x22
 8002da2:	d109      	bne.n	8002db8 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0209      	lsls	r1, r1, #8
 8002db2:	430a      	orrs	r2, r1
 8002db4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002db6:	e067      	b.n	8002e88 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	01c9      	lsls	r1, r1, #7
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002dca:	e05d      	b.n	8002e88 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	049b      	lsls	r3, r3, #18
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	049b      	lsls	r3, r3, #18
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d004      	beq.n	8002dea <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f9f6 	bl	80031d4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002de8:	e04e      	b.n	8002e88 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2140      	movs	r1, #64	; 0x40
 8002dee:	0018      	movs	r0, r3
 8002df0:	f000 fce8 	bl	80037c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002df4:	e048      	b.n	8002e88 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	001a      	movs	r2, r3
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	4013      	ands	r3, r2
 8002e00:	d02e      	beq.n	8002e60 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	001a      	movs	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002e0c:	d028      	beq.n	8002e60 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11d      	bne.n	8002e54 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	049b      	lsls	r3, r3, #18
 8002e22:	401a      	ands	r2, r3
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	049b      	lsls	r3, r3, #18
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d02c      	beq.n	8002e86 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4a1a      	ldr	r2, [pc, #104]	; (8002e9c <I2C_Master_ISR_DMA+0x214>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d109      	bne.n	8002e4a <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	01c9      	lsls	r1, r1, #7
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002e48:	e01d      	b.n	8002e86 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f9c1 	bl	80031d4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002e52:	e018      	b.n	8002e86 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2140      	movs	r1, #64	; 0x40
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f000 fcb3 	bl	80037c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e5e:	e012      	b.n	8002e86 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	001a      	movs	r2, r3
 8002e66:	2301      	movs	r3, #1
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d00d      	beq.n	8002e88 <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	095b      	lsrs	r3, r3, #5
 8002e70:	001a      	movs	r2, r3
 8002e72:	2301      	movs	r3, #1
 8002e74:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e76:	d007      	beq.n	8002e88 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fa50 	bl	8003324 <I2C_ITMasterCplt>
 8002e84:	e000      	b.n	8002e88 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8002e86:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2240      	movs	r2, #64	; 0x40
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	0018      	movs	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	b007      	add	sp, #28
 8002e98:	bd90      	pop	{r4, r7, pc}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	ffff0000 	.word	0xffff0000

08002ea0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b088      	sub	sp, #32
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2240      	movs	r2, #64	; 0x40
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <I2C_Slave_ISR_DMA+0x24>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e0dd      	b.n	8003080 <I2C_Slave_ISR_DMA+0x1e0>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2240      	movs	r2, #64	; 0x40
 8002ec8:	2101      	movs	r1, #1
 8002eca:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	001a      	movs	r2, r3
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002ee2:	d005      	beq.n	8002ef0 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002ee4:	68ba      	ldr	r2, [r7, #8]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	0011      	movs	r1, r2
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 faec 	bl	80034c8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	091b      	lsrs	r3, r3, #4
 8002ef4:	001a      	movs	r2, r3
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d100      	bne.n	8002efe <I2C_Slave_ISR_DMA+0x5e>
 8002efc:	e0a9      	b.n	8003052 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	001a      	movs	r2, r3
 8002f04:	2301      	movs	r3, #1
 8002f06:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002f08:	d100      	bne.n	8002f0c <I2C_Slave_ISR_DMA+0x6c>
 8002f0a:	e0a2      	b.n	8003052 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0b9b      	lsrs	r3, r3, #14
 8002f10:	001a      	movs	r2, r3
 8002f12:	2301      	movs	r3, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	d106      	bne.n	8002f26 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0bdb      	lsrs	r3, r3, #15
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	2301      	movs	r3, #1
 8002f20:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002f22:	d100      	bne.n	8002f26 <I2C_Slave_ISR_DMA+0x86>
 8002f24:	e08e      	b.n	8003044 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00d      	beq.n	8002f4a <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	0bdb      	lsrs	r3, r3, #15
 8002f32:	001a      	movs	r2, r3
 8002f34:	2301      	movs	r3, #1
 8002f36:	4013      	ands	r3, r2
 8002f38:	d007      	beq.n	8002f4a <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002f46:	2301      	movs	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00d      	beq.n	8002f6e <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0b9b      	lsrs	r3, r3, #14
 8002f56:	001a      	movs	r2, r3
 8002f58:	2301      	movs	r3, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d007      	beq.n	8002f6e <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d12d      	bne.n	8002fd0 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2241      	movs	r2, #65	; 0x41
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b28      	cmp	r3, #40	; 0x28
 8002f7e:	d10b      	bne.n	8002f98 <I2C_Slave_ISR_DMA+0xf8>
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	049b      	lsls	r3, r3, #18
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d106      	bne.n	8002f98 <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	0011      	movs	r1, r2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 fbbd 	bl	8003710 <I2C_ITListenCplt>
 8002f96:	e054      	b.n	8003042 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2241      	movs	r2, #65	; 0x41
 8002f9c:	5c9b      	ldrb	r3, [r3, r2]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b29      	cmp	r3, #41	; 0x29
 8002fa2:	d110      	bne.n	8002fc6 <I2C_Slave_ISR_DMA+0x126>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	4a38      	ldr	r2, [pc, #224]	; (8003088 <I2C_Slave_ISR_DMA+0x1e8>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00c      	beq.n	8002fc6 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 fd0f 	bl	80039da <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 f94a 	bl	8003258 <I2C_ITSlaveSeqCplt>
 8002fc4:	e03d      	b.n	8003042 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2210      	movs	r2, #16
 8002fcc:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002fce:	e03e      	b.n	800304e <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	2204      	movs	r2, #4
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002fe4:	2317      	movs	r3, #23
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	2141      	movs	r1, #65	; 0x41
 8002fec:	5c52      	ldrb	r2, [r2, r1]
 8002fee:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <I2C_Slave_ISR_DMA+0x160>
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	045b      	lsls	r3, r3, #17
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d126      	bne.n	800304e <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003000:	2217      	movs	r2, #23
 8003002:	18bb      	adds	r3, r7, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b21      	cmp	r3, #33	; 0x21
 8003008:	d003      	beq.n	8003012 <I2C_Slave_ISR_DMA+0x172>
 800300a:	18bb      	adds	r3, r7, r2
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b29      	cmp	r3, #41	; 0x29
 8003010:	d103      	bne.n	800301a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2221      	movs	r2, #33	; 0x21
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
 8003018:	e00b      	b.n	8003032 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800301a:	2217      	movs	r2, #23
 800301c:	18bb      	adds	r3, r7, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b22      	cmp	r3, #34	; 0x22
 8003022:	d003      	beq.n	800302c <I2C_Slave_ISR_DMA+0x18c>
 8003024:	18bb      	adds	r3, r7, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b2a      	cmp	r3, #42	; 0x2a
 800302a:	d102      	bne.n	8003032 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2222      	movs	r2, #34	; 0x22
 8003030:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0011      	movs	r1, r2
 800303a:	0018      	movs	r0, r3
 800303c:	f000 fbc2 	bl	80037c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8003040:	e005      	b.n	800304e <I2C_Slave_ISR_DMA+0x1ae>
 8003042:	e004      	b.n	800304e <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2210      	movs	r2, #16
 800304a:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800304c:	e013      	b.n	8003076 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800304e:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003050:	e011      	b.n	8003076 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	08db      	lsrs	r3, r3, #3
 8003056:	001a      	movs	r2, r3
 8003058:	2301      	movs	r3, #1
 800305a:	4013      	ands	r3, r2
 800305c:	d00b      	beq.n	8003076 <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	001a      	movs	r2, r3
 8003064:	2301      	movs	r3, #1
 8003066:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003068:	d005      	beq.n	8003076 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0011      	movs	r1, r2
 8003070:	0018      	movs	r0, r3
 8003072:	f000 f80b 	bl	800308c <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	2100      	movs	r1, #0
 800307c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b008      	add	sp, #32
 8003086:	bd80      	pop	{r7, pc}
 8003088:	ffff0000 	.word	0xffff0000

0800308c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800308c:	b5b0      	push	{r4, r5, r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2241      	movs	r2, #65	; 0x41
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	b2db      	uxtb	r3, r3
 800309e:	001a      	movs	r2, r3
 80030a0:	2328      	movs	r3, #40	; 0x28
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b28      	cmp	r3, #40	; 0x28
 80030a6:	d000      	beq.n	80030aa <I2C_ITAddrCplt+0x1e>
 80030a8:	e088      	b.n	80031bc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	0c1b      	lsrs	r3, r3, #16
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	250f      	movs	r5, #15
 80030b6:	197b      	adds	r3, r7, r5
 80030b8:	2101      	movs	r1, #1
 80030ba:	400a      	ands	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	200c      	movs	r0, #12
 80030ca:	183b      	adds	r3, r7, r0
 80030cc:	21fe      	movs	r1, #254	; 0xfe
 80030ce:	400a      	ands	r2, r1
 80030d0:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	b29a      	uxth	r2, r3
 80030da:	240a      	movs	r4, #10
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	0592      	lsls	r2, r2, #22
 80030e0:	0d92      	lsrs	r2, r2, #22
 80030e2:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	2308      	movs	r3, #8
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	21fe      	movs	r1, #254	; 0xfe
 80030f2:	400a      	ands	r2, r1
 80030f4:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d148      	bne.n	8003190 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80030fe:	0021      	movs	r1, r4
 8003100:	187b      	adds	r3, r7, r1
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	b29a      	uxth	r2, r3
 8003108:	183b      	adds	r3, r7, r0
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	4053      	eors	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	001a      	movs	r2, r3
 8003112:	2306      	movs	r3, #6
 8003114:	4013      	ands	r3, r2
 8003116:	d120      	bne.n	800315a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8003118:	183b      	adds	r3, r7, r0
 800311a:	187a      	adds	r2, r7, r1
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312e:	2b02      	cmp	r3, #2
 8003130:	d14c      	bne.n	80031cc <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2208      	movs	r2, #8
 800313e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003148:	183b      	adds	r3, r7, r0
 800314a:	881a      	ldrh	r2, [r3, #0]
 800314c:	197b      	adds	r3, r7, r5
 800314e:	7819      	ldrb	r1, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	f7ff fb0a 	bl	800276c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003158:	e038      	b.n	80031cc <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800315a:	240c      	movs	r4, #12
 800315c:	193b      	adds	r3, r7, r4
 800315e:	2208      	movs	r2, #8
 8003160:	18ba      	adds	r2, r7, r2
 8003162:	8812      	ldrh	r2, [r2, #0]
 8003164:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	021a      	lsls	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0011      	movs	r1, r2
 800316e:	0018      	movs	r0, r3
 8003170:	f000 fd12 	bl	8003b98 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2240      	movs	r2, #64	; 0x40
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800317c:	193b      	adds	r3, r7, r4
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	230f      	movs	r3, #15
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	7819      	ldrb	r1, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	0018      	movs	r0, r3
 800318a:	f7ff faef 	bl	800276c <HAL_I2C_AddrCallback>
}
 800318e:	e01d      	b.n	80031cc <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	021a      	lsls	r2, r3, #8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	0011      	movs	r1, r2
 8003198:	0018      	movs	r0, r3
 800319a:	f000 fcfd 	bl	8003b98 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2240      	movs	r2, #64	; 0x40
 80031a2:	2100      	movs	r1, #0
 80031a4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80031a6:	230c      	movs	r3, #12
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	230f      	movs	r3, #15
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	7819      	ldrb	r1, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff fad9 	bl	800276c <HAL_I2C_AddrCallback>
}
 80031ba:	e007      	b.n	80031cc <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2208      	movs	r2, #8
 80031c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	2100      	movs	r1, #0
 80031ca:	5499      	strb	r1, [r3, r2]
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}

080031d4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2242      	movs	r2, #66	; 0x42
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2241      	movs	r2, #65	; 0x41
 80031e8:	5c9b      	ldrb	r3, [r3, r2]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b21      	cmp	r3, #33	; 0x21
 80031ee:	d117      	bne.n	8003220 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2241      	movs	r2, #65	; 0x41
 80031f4:	2120      	movs	r1, #32
 80031f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2211      	movs	r2, #17
 80031fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2101      	movs	r1, #1
 8003208:	0018      	movs	r0, r3
 800320a:	f000 fcc5 	bl	8003b98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2240      	movs	r2, #64	; 0x40
 8003212:	2100      	movs	r1, #0
 8003214:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f7ff fa87 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800321e:	e016      	b.n	800324e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2241      	movs	r2, #65	; 0x41
 8003224:	2120      	movs	r1, #32
 8003226:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2212      	movs	r2, #18
 800322c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2102      	movs	r1, #2
 8003238:	0018      	movs	r0, r3
 800323a:	f000 fcad 	bl	8003b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2240      	movs	r2, #64	; 0x40
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f7ff fa77 	bl	800273c <HAL_I2C_MasterRxCpltCallback>
}
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	46bd      	mov	sp, r7
 8003252:	b002      	add	sp, #8
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2242      	movs	r2, #66	; 0x42
 800326c:	2100      	movs	r1, #0
 800326e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	0b9b      	lsrs	r3, r3, #14
 8003274:	001a      	movs	r2, r3
 8003276:	2301      	movs	r3, #1
 8003278:	4013      	ands	r3, r2
 800327a:	d008      	beq.n	800328e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4925      	ldr	r1, [pc, #148]	; (800331c <I2C_ITSlaveSeqCplt+0xc4>)
 8003288:	400a      	ands	r2, r1
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e00d      	b.n	80032aa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	0bdb      	lsrs	r3, r3, #15
 8003292:	001a      	movs	r2, r3
 8003294:	2301      	movs	r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d007      	beq.n	80032aa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	491e      	ldr	r1, [pc, #120]	; (8003320 <I2C_ITSlaveSeqCplt+0xc8>)
 80032a6:	400a      	ands	r2, r1
 80032a8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	5c9b      	ldrb	r3, [r3, r2]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b29      	cmp	r3, #41	; 0x29
 80032b4:	d114      	bne.n	80032e0 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2241      	movs	r2, #65	; 0x41
 80032ba:	2128      	movs	r1, #40	; 0x28
 80032bc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2221      	movs	r2, #33	; 0x21
 80032c2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2101      	movs	r1, #1
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fc65 	bl	8003b98 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2240      	movs	r2, #64	; 0x40
 80032d2:	2100      	movs	r1, #0
 80032d4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f7ff fa37 	bl	800274c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80032de:	e019      	b.n	8003314 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2241      	movs	r2, #65	; 0x41
 80032e4:	5c9b      	ldrb	r3, [r3, r2]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b2a      	cmp	r3, #42	; 0x2a
 80032ea:	d113      	bne.n	8003314 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2241      	movs	r2, #65	; 0x41
 80032f0:	2128      	movs	r1, #40	; 0x28
 80032f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2222      	movs	r2, #34	; 0x22
 80032f8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2102      	movs	r1, #2
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fc4a 	bl	8003b98 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2240      	movs	r2, #64	; 0x40
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	0018      	movs	r0, r3
 8003310:	f7ff fa24 	bl	800275c <HAL_I2C_SlaveRxCpltCallback>
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b004      	add	sp, #16
 800331a:	bd80      	pop	{r7, pc}
 800331c:	ffffbfff 	.word	0xffffbfff
 8003320:	ffff7fff 	.word	0xffff7fff

08003324 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2220      	movs	r2, #32
 8003338:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2241      	movs	r2, #65	; 0x41
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b21      	cmp	r3, #33	; 0x21
 8003344:	d108      	bne.n	8003358 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2101      	movs	r1, #1
 800334a:	0018      	movs	r0, r3
 800334c:	f000 fc24 	bl	8003b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2211      	movs	r2, #17
 8003354:	631a      	str	r2, [r3, #48]	; 0x30
 8003356:	e00d      	b.n	8003374 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2241      	movs	r2, #65	; 0x41
 800335c:	5c9b      	ldrb	r3, [r3, r2]
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b22      	cmp	r3, #34	; 0x22
 8003362:	d107      	bne.n	8003374 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2102      	movs	r1, #2
 8003368:	0018      	movs	r0, r3
 800336a:	f000 fc15 	bl	8003b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2212      	movs	r2, #18
 8003372:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4950      	ldr	r1, [pc, #320]	; (80034c0 <I2C_ITMasterCplt+0x19c>)
 8003380:	400a      	ands	r2, r1
 8003382:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <I2C_ITMasterCplt+0x1a0>)
 800338e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	091b      	lsrs	r3, r3, #4
 8003394:	001a      	movs	r2, r3
 8003396:	2301      	movs	r3, #1
 8003398:	4013      	ands	r3, r2
 800339a:	d009      	beq.n	80033b0 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	2204      	movs	r2, #4
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2241      	movs	r2, #65	; 0x41
 80033b4:	5c9b      	ldrb	r3, [r3, r2]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d10b      	bne.n	80033d4 <I2C_ITMasterCplt+0xb0>
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	001a      	movs	r2, r3
 80033c2:	2301      	movs	r3, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	d005      	beq.n	80033d4 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80033d2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 faff 	bl	80039da <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2241      	movs	r2, #65	; 0x41
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b60      	cmp	r3, #96	; 0x60
 80033ec:	d002      	beq.n	80033f4 <I2C_ITMasterCplt+0xd0>
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0011      	movs	r1, r2
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f9e1 	bl	80037c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003402:	e058      	b.n	80034b6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2241      	movs	r2, #65	; 0x41
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b21      	cmp	r3, #33	; 0x21
 800340e:	d126      	bne.n	800345e <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2241      	movs	r2, #65	; 0x41
 8003414:	2120      	movs	r1, #32
 8003416:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2242      	movs	r2, #66	; 0x42
 8003422:	5c9b      	ldrb	r3, [r3, r2]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d10c      	bne.n	8003444 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2242      	movs	r2, #66	; 0x42
 800342e:	2100      	movs	r1, #0
 8003430:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	2100      	movs	r1, #0
 8003438:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	0018      	movs	r0, r3
 800343e:	f7ff f9ad 	bl	800279c <HAL_I2C_MemTxCpltCallback>
}
 8003442:	e038      	b.n	80034b6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2242      	movs	r2, #66	; 0x42
 8003448:	2100      	movs	r1, #0
 800344a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2240      	movs	r2, #64	; 0x40
 8003450:	2100      	movs	r1, #0
 8003452:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff f968 	bl	800272c <HAL_I2C_MasterTxCpltCallback>
}
 800345c:	e02b      	b.n	80034b6 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2241      	movs	r2, #65	; 0x41
 8003462:	5c9b      	ldrb	r3, [r3, r2]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b22      	cmp	r3, #34	; 0x22
 8003468:	d125      	bne.n	80034b6 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2241      	movs	r2, #65	; 0x41
 800346e:	2120      	movs	r1, #32
 8003470:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2242      	movs	r2, #66	; 0x42
 800347c:	5c9b      	ldrb	r3, [r3, r2]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b40      	cmp	r3, #64	; 0x40
 8003482:	d10c      	bne.n	800349e <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2242      	movs	r2, #66	; 0x42
 8003488:	2100      	movs	r1, #0
 800348a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2240      	movs	r2, #64	; 0x40
 8003490:	2100      	movs	r1, #0
 8003492:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	0018      	movs	r0, r3
 8003498:	f7ff f988 	bl	80027ac <HAL_I2C_MemRxCpltCallback>
}
 800349c:	e00b      	b.n	80034b6 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2242      	movs	r2, #66	; 0x42
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	2100      	movs	r1, #0
 80034ac:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0018      	movs	r0, r3
 80034b2:	f7ff f943 	bl	800273c <HAL_I2C_MasterRxCpltCallback>
}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b006      	add	sp, #24
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	46c0      	nop			; (mov r8, r8)
 80034c0:	fe00e800 	.word	0xfe00e800
 80034c4:	ffff0000 	.word	0xffff0000

080034c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80034de:	200f      	movs	r0, #15
 80034e0:	183b      	adds	r3, r7, r0
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	2141      	movs	r1, #65	; 0x41
 80034e6:	5c52      	ldrb	r2, [r2, r1]
 80034e8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2220      	movs	r2, #32
 80034f0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034f2:	183b      	adds	r3, r7, r0
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b21      	cmp	r3, #33	; 0x21
 80034f8:	d003      	beq.n	8003502 <I2C_ITSlaveCplt+0x3a>
 80034fa:	183b      	adds	r3, r7, r0
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	2b29      	cmp	r3, #41	; 0x29
 8003500:	d109      	bne.n	8003516 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003502:	4a7d      	ldr	r2, [pc, #500]	; (80036f8 <I2C_ITSlaveCplt+0x230>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f000 fb45 	bl	8003b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2221      	movs	r2, #33	; 0x21
 8003512:	631a      	str	r2, [r3, #48]	; 0x30
 8003514:	e011      	b.n	800353a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003516:	220f      	movs	r2, #15
 8003518:	18bb      	adds	r3, r7, r2
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b22      	cmp	r3, #34	; 0x22
 800351e:	d003      	beq.n	8003528 <I2C_ITSlaveCplt+0x60>
 8003520:	18bb      	adds	r3, r7, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b2a      	cmp	r3, #42	; 0x2a
 8003526:	d108      	bne.n	800353a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003528:	4a74      	ldr	r2, [pc, #464]	; (80036fc <I2C_ITSlaveCplt+0x234>)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0011      	movs	r1, r2
 800352e:	0018      	movs	r0, r3
 8003530:	f000 fb32 	bl	8003b98 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2222      	movs	r2, #34	; 0x22
 8003538:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2180      	movs	r1, #128	; 0x80
 8003546:	0209      	lsls	r1, r1, #8
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	496a      	ldr	r1, [pc, #424]	; (8003700 <I2C_ITSlaveCplt+0x238>)
 8003558:	400a      	ands	r2, r1
 800355a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0018      	movs	r0, r3
 8003560:	f000 fa3b 	bl	80039da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	0b9b      	lsrs	r3, r3, #14
 8003568:	001a      	movs	r2, r3
 800356a:	2301      	movs	r3, #1
 800356c:	4013      	ands	r3, r2
 800356e:	d013      	beq.n	8003598 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4962      	ldr	r1, [pc, #392]	; (8003704 <I2C_ITSlaveCplt+0x23c>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003596:	e018      	b.n	80035ca <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	0bdb      	lsrs	r3, r3, #15
 800359c:	001a      	movs	r2, r3
 800359e:	2301      	movs	r3, #1
 80035a0:	4013      	ands	r3, r2
 80035a2:	d012      	beq.n	80035ca <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4956      	ldr	r1, [pc, #344]	; (8003708 <I2C_ITSlaveCplt+0x240>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d006      	beq.n	80035ca <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	089b      	lsrs	r3, r3, #2
 80035ce:	001a      	movs	r2, r3
 80035d0:	2301      	movs	r3, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	d020      	beq.n	8003618 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2204      	movs	r2, #4
 80035da:	4393      	bics	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003626:	2204      	movs	r2, #4
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2242      	movs	r2, #66	; 0x42
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	2b00      	cmp	r3, #0
 8003642:	d013      	beq.n	800366c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	0011      	movs	r1, r2
 800364c:	0018      	movs	r0, r3
 800364e:	f000 f8b9 	bl	80037c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2241      	movs	r2, #65	; 0x41
 8003656:	5c9b      	ldrb	r3, [r3, r2]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b28      	cmp	r3, #40	; 0x28
 800365c:	d147      	bne.n	80036ee <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0011      	movs	r1, r2
 8003664:	0018      	movs	r0, r3
 8003666:	f000 f853 	bl	8003710 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800366a:	e040      	b.n	80036ee <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	4a26      	ldr	r2, [pc, #152]	; (800370c <I2C_ITSlaveCplt+0x244>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d016      	beq.n	80036a4 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fded 	bl	8003258 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <I2C_ITSlaveCplt+0x244>)
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2241      	movs	r2, #65	; 0x41
 8003688:	2120      	movs	r1, #32
 800368a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2240      	movs	r2, #64	; 0x40
 8003696:	2100      	movs	r1, #0
 8003698:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f7ff f875 	bl	800278c <HAL_I2C_ListenCpltCallback>
}
 80036a2:	e024      	b.n	80036ee <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2241      	movs	r2, #65	; 0x41
 80036a8:	5c9b      	ldrb	r3, [r3, r2]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b22      	cmp	r3, #34	; 0x22
 80036ae:	d10f      	bne.n	80036d0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2241      	movs	r2, #65	; 0x41
 80036b4:	2120      	movs	r1, #32
 80036b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7ff f847 	bl	800275c <HAL_I2C_SlaveRxCpltCallback>
}
 80036ce:	e00e      	b.n	80036ee <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2241      	movs	r2, #65	; 0x41
 80036d4:	2120      	movs	r1, #32
 80036d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2240      	movs	r2, #64	; 0x40
 80036e2:	2100      	movs	r1, #0
 80036e4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff f82f 	bl	800274c <HAL_I2C_SlaveTxCpltCallback>
}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b006      	add	sp, #24
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	00008001 	.word	0x00008001
 80036fc:	00008002 	.word	0x00008002
 8003700:	fe00e800 	.word	0xfe00e800
 8003704:	ffffbfff 	.word	0xffffbfff
 8003708:	ffff7fff 	.word	0xffff7fff
 800370c:	ffff0000 	.word	0xffff0000

08003710 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <I2C_ITListenCplt+0xac>)
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2241      	movs	r2, #65	; 0x41
 800372a:	2120      	movs	r1, #32
 800372c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2242      	movs	r2, #66	; 0x42
 8003732:	2100      	movs	r1, #0
 8003734:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	089b      	lsrs	r3, r3, #2
 8003740:	001a      	movs	r2, r3
 8003742:	2301      	movs	r3, #1
 8003744:	4013      	ands	r3, r2
 8003746:	d022      	beq.n	800378e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	d012      	beq.n	800378e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	2204      	movs	r2, #4
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800378e:	4a0c      	ldr	r2, [pc, #48]	; (80037c0 <I2C_ITListenCplt+0xb0>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	0011      	movs	r1, r2
 8003794:	0018      	movs	r0, r3
 8003796:	f000 f9ff 	bl	8003b98 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2210      	movs	r2, #16
 80037a0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	2100      	movs	r1, #0
 80037a8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7fe ffed 	bl	800278c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b002      	add	sp, #8
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	ffff0000 	.word	0xffff0000
 80037c0:	00008003 	.word	0x00008003

080037c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80037ce:	200f      	movs	r0, #15
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	2141      	movs	r1, #65	; 0x41
 80037d6:	5c52      	ldrb	r2, [r2, r1]
 80037d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2242      	movs	r2, #66	; 0x42
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a62      	ldr	r2, [pc, #392]	; (8003970 <I2C_ITError+0x1ac>)
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80037fa:	183b      	adds	r3, r7, r0
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b28      	cmp	r3, #40	; 0x28
 8003800:	d007      	beq.n	8003812 <I2C_ITError+0x4e>
 8003802:	183b      	adds	r3, r7, r0
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b29      	cmp	r3, #41	; 0x29
 8003808:	d003      	beq.n	8003812 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800380a:	183b      	adds	r3, r7, r0
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b2a      	cmp	r3, #42	; 0x2a
 8003810:	d10c      	bne.n	800382c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2103      	movs	r1, #3
 8003816:	0018      	movs	r0, r3
 8003818:	f000 f9be 	bl	8003b98 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2241      	movs	r2, #65	; 0x41
 8003820:	2128      	movs	r1, #40	; 0x28
 8003822:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a53      	ldr	r2, [pc, #332]	; (8003974 <I2C_ITError+0x1b0>)
 8003828:	635a      	str	r2, [r3, #52]	; 0x34
 800382a:	e012      	b.n	8003852 <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800382c:	4a52      	ldr	r2, [pc, #328]	; (8003978 <I2C_ITError+0x1b4>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0011      	movs	r1, r2
 8003832:	0018      	movs	r0, r3
 8003834:	f000 f9b0 	bl	8003b98 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2241      	movs	r2, #65	; 0x41
 800383c:	5c9b      	ldrb	r3, [r3, r2]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b60      	cmp	r3, #96	; 0x60
 8003842:	d003      	beq.n	800384c <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2241      	movs	r2, #65	; 0x41
 8003848:	2120      	movs	r1, #32
 800384a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	2b00      	cmp	r3, #0
 800385e:	d03b      	beq.n	80038d8 <I2C_ITError+0x114>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b11      	cmp	r3, #17
 8003864:	d002      	beq.n	800386c <I2C_ITError+0xa8>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b21      	cmp	r3, #33	; 0x21
 800386a:	d135      	bne.n	80038d8 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	2380      	movs	r3, #128	; 0x80
 8003874:	01db      	lsls	r3, r3, #7
 8003876:	401a      	ands	r2, r3
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	01db      	lsls	r3, r3, #7
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	493c      	ldr	r1, [pc, #240]	; (800397c <I2C_ITError+0x1b8>)
 800388c:	400a      	ands	r2, r1
 800388e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	0018      	movs	r0, r3
 8003896:	f7fe fc0e 	bl	80020b6 <HAL_DMA_GetState>
 800389a:	0003      	movs	r3, r0
 800389c:	2b01      	cmp	r3, #1
 800389e:	d016      	beq.n	80038ce <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a4:	4a36      	ldr	r2, [pc, #216]	; (8003980 <I2C_ITError+0x1bc>)
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	2100      	movs	r1, #0
 80038ae:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b4:	0018      	movs	r0, r3
 80038b6:	f7fe fbb9 	bl	800202c <HAL_DMA_Abort_IT>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d051      	beq.n	8003962 <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	0018      	movs	r0, r3
 80038ca:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038cc:	e049      	b.n	8003962 <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 f859 	bl	8003988 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038d6:	e044      	b.n	8003962 <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03b      	beq.n	8003958 <I2C_ITError+0x194>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b12      	cmp	r3, #18
 80038e4:	d002      	beq.n	80038ec <I2C_ITError+0x128>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b22      	cmp	r3, #34	; 0x22
 80038ea:	d135      	bne.n	8003958 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	2380      	movs	r3, #128	; 0x80
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	401a      	ands	r2, r3
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d107      	bne.n	8003910 <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	491e      	ldr	r1, [pc, #120]	; (8003984 <I2C_ITError+0x1c0>)
 800390c:	400a      	ands	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003914:	0018      	movs	r0, r3
 8003916:	f7fe fbce 	bl	80020b6 <HAL_DMA_GetState>
 800391a:	0003      	movs	r3, r0
 800391c:	2b01      	cmp	r3, #1
 800391e:	d016      	beq.n	800394e <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003924:	4a16      	ldr	r2, [pc, #88]	; (8003980 <I2C_ITError+0x1bc>)
 8003926:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2240      	movs	r2, #64	; 0x40
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003934:	0018      	movs	r0, r3
 8003936:	f7fe fb79 	bl	800202c <HAL_DMA_Abort_IT>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d013      	beq.n	8003966 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	0018      	movs	r0, r3
 800394a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800394c:	e00b      	b.n	8003966 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f000 f819 	bl	8003988 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003956:	e006      	b.n	8003966 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0018      	movs	r0, r3
 800395c:	f000 f814 	bl	8003988 <I2C_TreatErrorCallback>
  }
}
 8003960:	e002      	b.n	8003968 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003962:	46c0      	nop			; (mov r8, r8)
 8003964:	e000      	b.n	8003968 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003966:	46c0      	nop			; (mov r8, r8)
}
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	ffff0000 	.word	0xffff0000
 8003974:	08002a61 	.word	0x08002a61
 8003978:	00008003 	.word	0x00008003
 800397c:	ffffbfff 	.word	0xffffbfff
 8003980:	08003a1f 	.word	0x08003a1f
 8003984:	ffff7fff 	.word	0xffff7fff

08003988 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2241      	movs	r2, #65	; 0x41
 8003994:	5c9b      	ldrb	r3, [r3, r2]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b60      	cmp	r3, #96	; 0x60
 800399a:	d10f      	bne.n	80039bc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2241      	movs	r2, #65	; 0x41
 80039a0:	2120      	movs	r1, #32
 80039a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fe ff09 	bl	80027cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039ba:	e00a      	b.n	80039d2 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7fe fef5 	bl	80027bc <HAL_I2C_ErrorCallback>
}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b002      	add	sp, #8
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d103      	bne.n	80039f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2201      	movs	r2, #1
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d007      	beq.n	8003a16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	699a      	ldr	r2, [r3, #24]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	619a      	str	r2, [r3, #24]
  }
}
 8003a16:	46c0      	nop			; (mov r8, r8)
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	b002      	add	sp, #8
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	2200      	movs	r2, #0
 8003a3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a48:	2200      	movs	r2, #0
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f7ff ff9a 	bl	8003988 <I2C_TreatErrorCallback>
}
 8003a54:	46c0      	nop			; (mov r8, r8)
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b004      	add	sp, #16
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	0008      	movs	r0, r1
 8003a66:	0011      	movs	r1, r2
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	240a      	movs	r4, #10
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	1c02      	adds	r2, r0, #0
 8003a70:	801a      	strh	r2, [r3, #0]
 8003a72:	2009      	movs	r0, #9
 8003a74:	183b      	adds	r3, r7, r0
 8003a76:	1c0a      	adds	r2, r1, #0
 8003a78:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	6a3a      	ldr	r2, [r7, #32]
 8003a82:	0d51      	lsrs	r1, r2, #21
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	00d2      	lsls	r2, r2, #3
 8003a88:	400a      	ands	r2, r1
 8003a8a:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <I2C_TransferConfig+0x68>)
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	43d2      	mvns	r2, r2
 8003a90:	401a      	ands	r2, r3
 8003a92:	0011      	movs	r1, r2
 8003a94:	193b      	adds	r3, r7, r4
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	059b      	lsls	r3, r3, #22
 8003a9a:	0d9a      	lsrs	r2, r3, #22
 8003a9c:	183b      	adds	r3, r7, r0
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	0418      	lsls	r0, r3, #16
 8003aa2:	23ff      	movs	r3, #255	; 0xff
 8003aa4:	041b      	lsls	r3, r3, #16
 8003aa6:	4003      	ands	r3, r0
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	431a      	orrs	r2, r3
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b005      	add	sp, #20
 8003ac0:	bd90      	pop	{r4, r7, pc}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	03ff63ff 	.word	0x03ff63ff

08003ac8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	000a      	movs	r2, r1
 8003ad2:	1cbb      	adds	r3, r7, #2
 8003ad4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ade:	4b2c      	ldr	r3, [pc, #176]	; (8003b90 <I2C_Enable_IRQ+0xc8>)
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d004      	beq.n	8003aee <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <I2C_Enable_IRQ+0xcc>)
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d121      	bne.n	8003b32 <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003aee:	1cbb      	adds	r3, r7, #2
 8003af0:	2200      	movs	r2, #0
 8003af2:	5e9b      	ldrsh	r3, [r3, r2]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da03      	bge.n	8003b00 <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	22b8      	movs	r2, #184	; 0xb8
 8003afc:	4313      	orrs	r3, r2
 8003afe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b00:	1cbb      	adds	r3, r7, #2
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d103      	bne.n	8003b10 <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2290      	movs	r2, #144	; 0x90
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b10:	1cbb      	adds	r3, r7, #2
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d103      	bne.n	8003b20 <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2260      	movs	r2, #96	; 0x60
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b20:	1cbb      	adds	r3, r7, #2
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	2b40      	cmp	r3, #64	; 0x40
 8003b26:	d127      	bne.n	8003b78 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2240      	movs	r2, #64	; 0x40
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b30:	e022      	b.n	8003b78 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b32:	1cbb      	adds	r3, r7, #2
 8003b34:	2200      	movs	r2, #0
 8003b36:	5e9b      	ldrsh	r3, [r3, r2]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	da03      	bge.n	8003b44 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	22b8      	movs	r2, #184	; 0xb8
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b44:	1cbb      	adds	r3, r7, #2
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	22f2      	movs	r2, #242	; 0xf2
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b56:	1cbb      	adds	r3, r7, #2
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	d003      	beq.n	8003b68 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	22f4      	movs	r2, #244	; 0xf4
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b68:	1cbb      	adds	r3, r7, #2
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d103      	bne.n	8003b78 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6819      	ldr	r1, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]
}
 8003b88:	46c0      	nop			; (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b004      	add	sp, #16
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	08002c89 	.word	0x08002c89
 8003b94:	08002ea1 	.word	0x08002ea1

08003b98 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	000a      	movs	r2, r1
 8003ba2:	1cbb      	adds	r3, r7, #2
 8003ba4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003baa:	1cbb      	adds	r3, r7, #2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d010      	beq.n	8003bd6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2242      	movs	r2, #66	; 0x42
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2241      	movs	r2, #65	; 0x41
 8003bc0:	5c9b      	ldrb	r3, [r3, r2]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	2328      	movs	r3, #40	; 0x28
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b28      	cmp	r3, #40	; 0x28
 8003bcc:	d003      	beq.n	8003bd6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	22b0      	movs	r2, #176	; 0xb0
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003bd6:	1cbb      	adds	r3, r7, #2
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d010      	beq.n	8003c02 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2244      	movs	r2, #68	; 0x44
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2241      	movs	r2, #65	; 0x41
 8003bec:	5c9b      	ldrb	r3, [r3, r2]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	2328      	movs	r3, #40	; 0x28
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b28      	cmp	r3, #40	; 0x28
 8003bf8:	d003      	beq.n	8003c02 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	22b0      	movs	r2, #176	; 0xb0
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c02:	1cbb      	adds	r3, r7, #2
 8003c04:	2200      	movs	r2, #0
 8003c06:	5e9b      	ldrsh	r3, [r3, r2]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	da03      	bge.n	8003c14 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	22b8      	movs	r2, #184	; 0xb8
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003c14:	1cbb      	adds	r3, r7, #2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d103      	bne.n	8003c24 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2290      	movs	r2, #144	; 0x90
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003c24:	1cbb      	adds	r3, r7, #2
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d103      	bne.n	8003c34 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003c34:	1cbb      	adds	r3, r7, #2
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	2b40      	cmp	r3, #64	; 0x40
 8003c3a:	d103      	bne.n	8003c44 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2240      	movs	r2, #64	; 0x40
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43d9      	mvns	r1, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	400a      	ands	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bd80      	pop	{r7, pc}
	...

08003c60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2241      	movs	r2, #65	; 0x41
 8003c6e:	5c9b      	ldrb	r3, [r3, r2]
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b20      	cmp	r3, #32
 8003c74:	d138      	bne.n	8003ce8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2240      	movs	r2, #64	; 0x40
 8003c7a:	5c9b      	ldrb	r3, [r3, r2]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d101      	bne.n	8003c84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c80:	2302      	movs	r3, #2
 8003c82:	e032      	b.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2240      	movs	r2, #64	; 0x40
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2241      	movs	r2, #65	; 0x41
 8003c90:	2124      	movs	r1, #36	; 0x24
 8003c92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4911      	ldr	r1, [pc, #68]	; (8003cf4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003cb0:	400a      	ands	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2101      	movs	r1, #1
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2241      	movs	r2, #65	; 0x41
 8003cd8:	2120      	movs	r1, #32
 8003cda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2240      	movs	r2, #64	; 0x40
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	e000      	b.n	8003cea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ce8:	2302      	movs	r3, #2
  }
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	ffffefff 	.word	0xffffefff

08003cf8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2241      	movs	r2, #65	; 0x41
 8003d06:	5c9b      	ldrb	r3, [r3, r2]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d139      	bne.n	8003d82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2240      	movs	r2, #64	; 0x40
 8003d12:	5c9b      	ldrb	r3, [r3, r2]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d101      	bne.n	8003d1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	e033      	b.n	8003d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2240      	movs	r2, #64	; 0x40
 8003d20:	2101      	movs	r1, #1
 8003d22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2241      	movs	r2, #65	; 0x41
 8003d28:	2124      	movs	r1, #36	; 0x24
 8003d2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2101      	movs	r1, #1
 8003d38:	438a      	bics	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4a11      	ldr	r2, [pc, #68]	; (8003d8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2101      	movs	r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2241      	movs	r2, #65	; 0x41
 8003d72:	2120      	movs	r1, #32
 8003d74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2240      	movs	r2, #64	; 0x40
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b004      	add	sp, #16
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	fffff0ff 	.word	0xfffff0ff

08003d90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d102      	bne.n	8003da4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f000 fb76 	bl	8004490 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2201      	movs	r2, #1
 8003daa:	4013      	ands	r3, r2
 8003dac:	d100      	bne.n	8003db0 <HAL_RCC_OscConfig+0x20>
 8003dae:	e08e      	b.n	8003ece <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003db0:	4bc5      	ldr	r3, [pc, #788]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	220c      	movs	r2, #12
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d00e      	beq.n	8003dda <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003dbc:	4bc2      	ldr	r3, [pc, #776]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	220c      	movs	r2, #12
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d117      	bne.n	8003df8 <HAL_RCC_OscConfig+0x68>
 8003dc8:	4bbf      	ldr	r3, [pc, #764]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	23c0      	movs	r3, #192	; 0xc0
 8003dce:	025b      	lsls	r3, r3, #9
 8003dd0:	401a      	ands	r2, r3
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	025b      	lsls	r3, r3, #9
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d10e      	bne.n	8003df8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dda:	4bbb      	ldr	r3, [pc, #748]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	4013      	ands	r3, r2
 8003de4:	d100      	bne.n	8003de8 <HAL_RCC_OscConfig+0x58>
 8003de6:	e071      	b.n	8003ecc <HAL_RCC_OscConfig+0x13c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d000      	beq.n	8003df2 <HAL_RCC_OscConfig+0x62>
 8003df0:	e06c      	b.n	8003ecc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	f000 fb4c 	bl	8004490 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_OscConfig+0x80>
 8003e00:	4bb1      	ldr	r3, [pc, #708]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	4bb0      	ldr	r3, [pc, #704]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e06:	2180      	movs	r1, #128	; 0x80
 8003e08:	0249      	lsls	r1, r1, #9
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e02f      	b.n	8003e70 <HAL_RCC_OscConfig+0xe0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10c      	bne.n	8003e32 <HAL_RCC_OscConfig+0xa2>
 8003e18:	4bab      	ldr	r3, [pc, #684]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4baa      	ldr	r3, [pc, #680]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e1e:	49ab      	ldr	r1, [pc, #684]	; (80040cc <HAL_RCC_OscConfig+0x33c>)
 8003e20:	400a      	ands	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	4ba8      	ldr	r3, [pc, #672]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4ba7      	ldr	r3, [pc, #668]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e2a:	49a9      	ldr	r1, [pc, #676]	; (80040d0 <HAL_RCC_OscConfig+0x340>)
 8003e2c:	400a      	ands	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e01e      	b.n	8003e70 <HAL_RCC_OscConfig+0xe0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b05      	cmp	r3, #5
 8003e38:	d10e      	bne.n	8003e58 <HAL_RCC_OscConfig+0xc8>
 8003e3a:	4ba3      	ldr	r3, [pc, #652]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4ba2      	ldr	r3, [pc, #648]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e40:	2180      	movs	r1, #128	; 0x80
 8003e42:	02c9      	lsls	r1, r1, #11
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	4b9f      	ldr	r3, [pc, #636]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	4b9e      	ldr	r3, [pc, #632]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	0249      	lsls	r1, r1, #9
 8003e52:	430a      	orrs	r2, r1
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xe0>
 8003e58:	4b9b      	ldr	r3, [pc, #620]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b9a      	ldr	r3, [pc, #616]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e5e:	499b      	ldr	r1, [pc, #620]	; (80040cc <HAL_RCC_OscConfig+0x33c>)
 8003e60:	400a      	ands	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	4b98      	ldr	r3, [pc, #608]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b97      	ldr	r3, [pc, #604]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e6a:	4999      	ldr	r1, [pc, #612]	; (80040d0 <HAL_RCC_OscConfig+0x340>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d014      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd f982 	bl	8001180 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e82:	f7fd f97d 	bl	8001180 <HAL_GetTick>
 8003e86:	0002      	movs	r2, r0
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	; 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e2fd      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e94:	4b8c      	ldr	r3, [pc, #560]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0xf2>
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea2:	f7fd f96d 	bl	8001180 <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7fd f968 	bl	8001180 <HAL_GetTick>
 8003eb0:	0002      	movs	r2, r0
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	; 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e2e8      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ebe:	4b82      	ldr	r3, [pc, #520]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	029b      	lsls	r3, r3, #10
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d1f0      	bne.n	8003eac <HAL_RCC_OscConfig+0x11c>
 8003eca:	e000      	b.n	8003ece <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d100      	bne.n	8003eda <HAL_RCC_OscConfig+0x14a>
 8003ed8:	e06c      	b.n	8003fb4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003eda:	4b7b      	ldr	r3, [pc, #492]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	220c      	movs	r2, #12
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d00e      	beq.n	8003f02 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ee4:	4b78      	ldr	r3, [pc, #480]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	220c      	movs	r2, #12
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d11f      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1a0>
 8003ef0:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	23c0      	movs	r3, #192	; 0xc0
 8003ef6:	025b      	lsls	r3, r3, #9
 8003ef8:	401a      	ands	r2, r3
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d116      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f02:	4b71      	ldr	r3, [pc, #452]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2202      	movs	r2, #2
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x188>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e2bb      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	22f8      	movs	r2, #248	; 0xf8
 8003f1e:	4393      	bics	r3, r2
 8003f20:	0019      	movs	r1, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	00da      	lsls	r2, r3, #3
 8003f28:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f2e:	e041      	b.n	8003fb4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d024      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f38:	4b63      	ldr	r3, [pc, #396]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4b62      	ldr	r3, [pc, #392]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f3e:	2101      	movs	r1, #1
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7fd f91c 	bl	8001180 <HAL_GetTick>
 8003f48:	0003      	movs	r3, r0
 8003f4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd f917 	bl	8001180 <HAL_GetTick>
 8003f52:	0002      	movs	r2, r0
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e297      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f60:	4b59      	ldr	r3, [pc, #356]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2202      	movs	r2, #2
 8003f66:	4013      	ands	r3, r2
 8003f68:	d0f1      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f6a:	4b57      	ldr	r3, [pc, #348]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	22f8      	movs	r2, #248	; 0xf8
 8003f70:	4393      	bics	r3, r2
 8003f72:	0019      	movs	r1, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	00da      	lsls	r2, r3, #3
 8003f7a:	4b53      	ldr	r3, [pc, #332]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e018      	b.n	8003fb4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f82:	4b51      	ldr	r3, [pc, #324]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b50      	ldr	r3, [pc, #320]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003f88:	2101      	movs	r1, #1
 8003f8a:	438a      	bics	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8e:	f7fd f8f7 	bl	8001180 <HAL_GetTick>
 8003f92:	0003      	movs	r3, r0
 8003f94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f98:	f7fd f8f2 	bl	8001180 <HAL_GetTick>
 8003f9c:	0002      	movs	r2, r0
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e272      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003faa:	4b47      	ldr	r3, [pc, #284]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d1f1      	bne.n	8003f98 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d036      	beq.n	800402c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d019      	beq.n	8003ffa <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fc6:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fca:	4b3f      	ldr	r3, [pc, #252]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003fcc:	2101      	movs	r1, #1
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd2:	f7fd f8d5 	bl	8001180 <HAL_GetTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fdc:	f7fd f8d0 	bl	8001180 <HAL_GetTick>
 8003fe0:	0002      	movs	r2, r0
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e250      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d0f1      	beq.n	8003fdc <HAL_RCC_OscConfig+0x24c>
 8003ff8:	e018      	b.n	800402c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ffa:	4b33      	ldr	r3, [pc, #204]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8003ffc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ffe:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004000:	2101      	movs	r1, #1
 8004002:	438a      	bics	r2, r1
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004006:	f7fd f8bb 	bl	8001180 <HAL_GetTick>
 800400a:	0003      	movs	r3, r0
 800400c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004010:	f7fd f8b6 	bl	8001180 <HAL_GetTick>
 8004014:	0002      	movs	r2, r0
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e236      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004022:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	2202      	movs	r2, #2
 8004028:	4013      	ands	r3, r2
 800402a:	d1f1      	bne.n	8004010 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2204      	movs	r2, #4
 8004032:	4013      	ands	r3, r2
 8004034:	d100      	bne.n	8004038 <HAL_RCC_OscConfig+0x2a8>
 8004036:	e0b5      	b.n	80041a4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004038:	201f      	movs	r0, #31
 800403a:	183b      	adds	r3, r7, r0
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	2380      	movs	r3, #128	; 0x80
 8004046:	055b      	lsls	r3, r3, #21
 8004048:	4013      	ands	r3, r2
 800404a:	d110      	bne.n	800406e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	4b1d      	ldr	r3, [pc, #116]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 8004052:	2180      	movs	r1, #128	; 0x80
 8004054:	0549      	lsls	r1, r1, #21
 8004056:	430a      	orrs	r2, r1
 8004058:	61da      	str	r2, [r3, #28]
 800405a:	4b1b      	ldr	r3, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	2380      	movs	r3, #128	; 0x80
 8004060:	055b      	lsls	r3, r3, #21
 8004062:	4013      	ands	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
 8004066:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004068:	183b      	adds	r3, r7, r0
 800406a:	2201      	movs	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800406e:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_OscConfig+0x344>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4013      	ands	r3, r2
 8004078:	d11a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800407a:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <HAL_RCC_OscConfig+0x344>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_RCC_OscConfig+0x344>)
 8004080:	2180      	movs	r1, #128	; 0x80
 8004082:	0049      	lsls	r1, r1, #1
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004088:	f7fd f87a 	bl	8001180 <HAL_GetTick>
 800408c:	0003      	movs	r3, r0
 800408e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004092:	f7fd f875 	bl	8001180 <HAL_GetTick>
 8004096:	0002      	movs	r2, r0
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b64      	cmp	r3, #100	; 0x64
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1f5      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCC_OscConfig+0x344>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	2380      	movs	r3, #128	; 0x80
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	4013      	ands	r3, r2
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10f      	bne.n	80040d8 <HAL_RCC_OscConfig+0x348>
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 80040ba:	6a1a      	ldr	r2, [r3, #32]
 80040bc:	4b02      	ldr	r3, [pc, #8]	; (80040c8 <HAL_RCC_OscConfig+0x338>)
 80040be:	2101      	movs	r1, #1
 80040c0:	430a      	orrs	r2, r1
 80040c2:	621a      	str	r2, [r3, #32]
 80040c4:	e036      	b.n	8004134 <HAL_RCC_OscConfig+0x3a4>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	40021000 	.word	0x40021000
 80040cc:	fffeffff 	.word	0xfffeffff
 80040d0:	fffbffff 	.word	0xfffbffff
 80040d4:	40007000 	.word	0x40007000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10c      	bne.n	80040fa <HAL_RCC_OscConfig+0x36a>
 80040e0:	4bca      	ldr	r3, [pc, #808]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80040e2:	6a1a      	ldr	r2, [r3, #32]
 80040e4:	4bc9      	ldr	r3, [pc, #804]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80040e6:	2101      	movs	r1, #1
 80040e8:	438a      	bics	r2, r1
 80040ea:	621a      	str	r2, [r3, #32]
 80040ec:	4bc7      	ldr	r3, [pc, #796]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	4bc6      	ldr	r3, [pc, #792]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80040f2:	2104      	movs	r1, #4
 80040f4:	438a      	bics	r2, r1
 80040f6:	621a      	str	r2, [r3, #32]
 80040f8:	e01c      	b.n	8004134 <HAL_RCC_OscConfig+0x3a4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x38c>
 8004102:	4bc2      	ldr	r3, [pc, #776]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	4bc1      	ldr	r3, [pc, #772]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004108:	2104      	movs	r1, #4
 800410a:	430a      	orrs	r2, r1
 800410c:	621a      	str	r2, [r3, #32]
 800410e:	4bbf      	ldr	r3, [pc, #764]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	4bbe      	ldr	r3, [pc, #760]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004114:	2101      	movs	r1, #1
 8004116:	430a      	orrs	r2, r1
 8004118:	621a      	str	r2, [r3, #32]
 800411a:	e00b      	b.n	8004134 <HAL_RCC_OscConfig+0x3a4>
 800411c:	4bbb      	ldr	r3, [pc, #748]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	4bba      	ldr	r3, [pc, #744]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004122:	2101      	movs	r1, #1
 8004124:	438a      	bics	r2, r1
 8004126:	621a      	str	r2, [r3, #32]
 8004128:	4bb8      	ldr	r3, [pc, #736]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800412a:	6a1a      	ldr	r2, [r3, #32]
 800412c:	4bb7      	ldr	r3, [pc, #732]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800412e:	2104      	movs	r1, #4
 8004130:	438a      	bics	r2, r1
 8004132:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d014      	beq.n	8004166 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fd f820 	bl	8001180 <HAL_GetTick>
 8004140:	0003      	movs	r3, r0
 8004142:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004144:	e009      	b.n	800415a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fd f81b 	bl	8001180 <HAL_GetTick>
 800414a:	0002      	movs	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	4aaf      	ldr	r2, [pc, #700]	; (8004410 <HAL_RCC_OscConfig+0x680>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e19a      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415a:	4bac      	ldr	r3, [pc, #688]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	2202      	movs	r2, #2
 8004160:	4013      	ands	r3, r2
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x3b6>
 8004164:	e013      	b.n	800418e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004166:	f7fd f80b 	bl	8001180 <HAL_GetTick>
 800416a:	0003      	movs	r3, r0
 800416c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416e:	e009      	b.n	8004184 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004170:	f7fd f806 	bl	8001180 <HAL_GetTick>
 8004174:	0002      	movs	r2, r0
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	4aa5      	ldr	r2, [pc, #660]	; (8004410 <HAL_RCC_OscConfig+0x680>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e185      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004184:	4ba1      	ldr	r3, [pc, #644]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	2202      	movs	r2, #2
 800418a:	4013      	ands	r3, r2
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800418e:	231f      	movs	r3, #31
 8004190:	18fb      	adds	r3, r7, r3
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d105      	bne.n	80041a4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004198:	4b9c      	ldr	r3, [pc, #624]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	4b9b      	ldr	r3, [pc, #620]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800419e:	499d      	ldr	r1, [pc, #628]	; (8004414 <HAL_RCC_OscConfig+0x684>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2210      	movs	r2, #16
 80041aa:	4013      	ands	r3, r2
 80041ac:	d063      	beq.n	8004276 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d12a      	bne.n	800420c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80041b6:	4b95      	ldr	r3, [pc, #596]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ba:	4b94      	ldr	r3, [pc, #592]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041bc:	2104      	movs	r1, #4
 80041be:	430a      	orrs	r2, r1
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80041c2:	4b92      	ldr	r3, [pc, #584]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c6:	4b91      	ldr	r3, [pc, #580]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041c8:	2101      	movs	r1, #1
 80041ca:	430a      	orrs	r2, r1
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ce:	f7fc ffd7 	bl	8001180 <HAL_GetTick>
 80041d2:	0003      	movs	r3, r0
 80041d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80041d8:	f7fc ffd2 	bl	8001180 <HAL_GetTick>
 80041dc:	0002      	movs	r2, r0
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e152      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80041ea:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ee:	2202      	movs	r2, #2
 80041f0:	4013      	ands	r3, r2
 80041f2:	d0f1      	beq.n	80041d8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80041f4:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80041f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f8:	22f8      	movs	r2, #248	; 0xf8
 80041fa:	4393      	bics	r3, r2
 80041fc:	0019      	movs	r1, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	00da      	lsls	r2, r3, #3
 8004204:	4b81      	ldr	r3, [pc, #516]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004206:	430a      	orrs	r2, r1
 8004208:	635a      	str	r2, [r3, #52]	; 0x34
 800420a:	e034      	b.n	8004276 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	3305      	adds	r3, #5
 8004212:	d111      	bne.n	8004238 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004214:	4b7d      	ldr	r3, [pc, #500]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004218:	4b7c      	ldr	r3, [pc, #496]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800421a:	2104      	movs	r1, #4
 800421c:	438a      	bics	r2, r1
 800421e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004220:	4b7a      	ldr	r3, [pc, #488]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	22f8      	movs	r2, #248	; 0xf8
 8004226:	4393      	bics	r3, r2
 8004228:	0019      	movs	r1, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	00da      	lsls	r2, r3, #3
 8004230:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004232:	430a      	orrs	r2, r1
 8004234:	635a      	str	r2, [r3, #52]	; 0x34
 8004236:	e01e      	b.n	8004276 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004238:	4b74      	ldr	r3, [pc, #464]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	4b73      	ldr	r3, [pc, #460]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800423e:	2104      	movs	r1, #4
 8004240:	430a      	orrs	r2, r1
 8004242:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004244:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004248:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800424a:	2101      	movs	r1, #1
 800424c:	438a      	bics	r2, r1
 800424e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004250:	f7fc ff96 	bl	8001180 <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800425a:	f7fc ff91 	bl	8001180 <HAL_GetTick>
 800425e:	0002      	movs	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e111      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800426c:	4b67      	ldr	r3, [pc, #412]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800426e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	d1f1      	bne.n	800425a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2220      	movs	r2, #32
 800427c:	4013      	ands	r3, r2
 800427e:	d05c      	beq.n	800433a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004280:	4b62      	ldr	r3, [pc, #392]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	220c      	movs	r2, #12
 8004286:	4013      	ands	r3, r2
 8004288:	2b0c      	cmp	r3, #12
 800428a:	d00e      	beq.n	80042aa <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800428c:	4b5f      	ldr	r3, [pc, #380]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	220c      	movs	r2, #12
 8004292:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004294:	2b08      	cmp	r3, #8
 8004296:	d114      	bne.n	80042c2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004298:	4b5c      	ldr	r3, [pc, #368]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	23c0      	movs	r3, #192	; 0xc0
 800429e:	025b      	lsls	r3, r3, #9
 80042a0:	401a      	ands	r2, r3
 80042a2:	23c0      	movs	r3, #192	; 0xc0
 80042a4:	025b      	lsls	r3, r3, #9
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d10b      	bne.n	80042c2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80042aa:	4b58      	ldr	r3, [pc, #352]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80042ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ae:	2380      	movs	r3, #128	; 0x80
 80042b0:	025b      	lsls	r3, r3, #9
 80042b2:	4013      	ands	r3, r2
 80042b4:	d040      	beq.n	8004338 <HAL_RCC_OscConfig+0x5a8>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d03c      	beq.n	8004338 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e0e6      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01b      	beq.n	8004302 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80042ca:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80042cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ce:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	0249      	lsls	r1, r1, #9
 80042d4:	430a      	orrs	r2, r1
 80042d6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d8:	f7fc ff52 	bl	8001180 <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042e2:	f7fc ff4d 	bl	8001180 <HAL_GetTick>
 80042e6:	0002      	movs	r2, r0
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0cd      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80042f4:	4b45      	ldr	r3, [pc, #276]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80042f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	025b      	lsls	r3, r3, #9
 80042fc:	4013      	ands	r3, r2
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x552>
 8004300:	e01b      	b.n	800433a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004302:	4b42      	ldr	r3, [pc, #264]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004308:	4943      	ldr	r1, [pc, #268]	; (8004418 <HAL_RCC_OscConfig+0x688>)
 800430a:	400a      	ands	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7fc ff37 	bl	8001180 <HAL_GetTick>
 8004312:	0003      	movs	r3, r0
 8004314:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004318:	f7fc ff32 	bl	8001180 <HAL_GetTick>
 800431c:	0002      	movs	r2, r0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0b2      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800432a:	4b38      	ldr	r3, [pc, #224]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800432c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800432e:	2380      	movs	r3, #128	; 0x80
 8004330:	025b      	lsls	r3, r3, #9
 8004332:	4013      	ands	r3, r2
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0x588>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004338:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	2b00      	cmp	r3, #0
 8004340:	d100      	bne.n	8004344 <HAL_RCC_OscConfig+0x5b4>
 8004342:	e0a4      	b.n	800448e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004344:	4b31      	ldr	r3, [pc, #196]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	220c      	movs	r2, #12
 800434a:	4013      	ands	r3, r2
 800434c:	2b08      	cmp	r3, #8
 800434e:	d100      	bne.n	8004352 <HAL_RCC_OscConfig+0x5c2>
 8004350:	e078      	b.n	8004444 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004356:	2b02      	cmp	r3, #2
 8004358:	d14c      	bne.n	80043f4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800435a:	4b2c      	ldr	r3, [pc, #176]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004360:	492e      	ldr	r1, [pc, #184]	; (800441c <HAL_RCC_OscConfig+0x68c>)
 8004362:	400a      	ands	r2, r1
 8004364:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fc ff0b 	bl	8001180 <HAL_GetTick>
 800436a:	0003      	movs	r3, r0
 800436c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fc ff06 	bl	8001180 <HAL_GetTick>
 8004374:	0002      	movs	r2, r0
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e086      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004382:	4b22      	ldr	r3, [pc, #136]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	049b      	lsls	r3, r3, #18
 800438a:	4013      	ands	r3, r2
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	220f      	movs	r2, #15
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800439c:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 800439e:	430a      	orrs	r2, r1
 80043a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80043a2:	4b1a      	ldr	r3, [pc, #104]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a1e      	ldr	r2, [pc, #120]	; (8004420 <HAL_RCC_OscConfig+0x690>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b4:	431a      	orrs	r2, r3
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043b8:	430a      	orrs	r2, r1
 80043ba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043c2:	2180      	movs	r1, #128	; 0x80
 80043c4:	0449      	lsls	r1, r1, #17
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fc fed9 	bl	8001180 <HAL_GetTick>
 80043ce:	0003      	movs	r3, r0
 80043d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fc fed4 	bl	8001180 <HAL_GetTick>
 80043d8:	0002      	movs	r2, r0
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e054      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	049b      	lsls	r3, r3, #18
 80043ee:	4013      	ands	r3, r2
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x644>
 80043f2:	e04c      	b.n	800448e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <HAL_RCC_OscConfig+0x67c>)
 80043fa:	4908      	ldr	r1, [pc, #32]	; (800441c <HAL_RCC_OscConfig+0x68c>)
 80043fc:	400a      	ands	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004400:	f7fc febe 	bl	8001180 <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004408:	e015      	b.n	8004436 <HAL_RCC_OscConfig+0x6a6>
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	40021000 	.word	0x40021000
 8004410:	00001388 	.word	0x00001388
 8004414:	efffffff 	.word	0xefffffff
 8004418:	fffeffff 	.word	0xfffeffff
 800441c:	feffffff 	.word	0xfeffffff
 8004420:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004424:	f7fc feac 	bl	8001180 <HAL_GetTick>
 8004428:	0002      	movs	r2, r0
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e02c      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_RCC_OscConfig+0x708>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	2380      	movs	r3, #128	; 0x80
 800443c:	049b      	lsls	r3, r3, #18
 800443e:	4013      	ands	r3, r2
 8004440:	d1f0      	bne.n	8004424 <HAL_RCC_OscConfig+0x694>
 8004442:	e024      	b.n	800448e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e01f      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_RCC_OscConfig+0x708>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <HAL_RCC_OscConfig+0x708>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	23c0      	movs	r3, #192	; 0xc0
 8004460:	025b      	lsls	r3, r3, #9
 8004462:	401a      	ands	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004468:	429a      	cmp	r2, r3
 800446a:	d10e      	bne.n	800448a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	220f      	movs	r2, #15
 8004470:	401a      	ands	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d107      	bne.n	800448a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	23f0      	movs	r3, #240	; 0xf0
 800447e:	039b      	lsls	r3, r3, #14
 8004480:	401a      	ands	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	0018      	movs	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	b008      	add	sp, #32
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000

0800449c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e0bf      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2201      	movs	r2, #1
 80044b6:	4013      	ands	r3, r2
 80044b8:	683a      	ldr	r2, [r7, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d911      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044be:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2201      	movs	r2, #1
 80044c4:	4393      	bics	r3, r2
 80044c6:	0019      	movs	r1, r3
 80044c8:	4b5b      	ldr	r3, [pc, #364]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d0:	4b59      	ldr	r3, [pc, #356]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d001      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a6      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2202      	movs	r2, #2
 80044e8:	4013      	ands	r3, r2
 80044ea:	d015      	beq.n	8004518 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2204      	movs	r2, #4
 80044f2:	4013      	ands	r3, r2
 80044f4:	d006      	beq.n	8004504 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80044f6:	4b51      	ldr	r3, [pc, #324]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	4b50      	ldr	r3, [pc, #320]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 80044fc:	21e0      	movs	r1, #224	; 0xe0
 80044fe:	00c9      	lsls	r1, r1, #3
 8004500:	430a      	orrs	r2, r1
 8004502:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b4d      	ldr	r3, [pc, #308]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	22f0      	movs	r2, #240	; 0xf0
 800450a:	4393      	bics	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2201      	movs	r2, #1
 800451e:	4013      	ands	r3, r2
 8004520:	d04c      	beq.n	80045bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d107      	bne.n	800453a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452a:	4b44      	ldr	r3, [pc, #272]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	029b      	lsls	r3, r3, #10
 8004532:	4013      	ands	r3, r2
 8004534:	d120      	bne.n	8004578 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e07a      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	049b      	lsls	r3, r3, #18
 800454a:	4013      	ands	r3, r2
 800454c:	d114      	bne.n	8004578 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e06e      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b03      	cmp	r3, #3
 8004558:	d107      	bne.n	800456a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800455a:	4b38      	ldr	r3, [pc, #224]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 800455c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800455e:	2380      	movs	r3, #128	; 0x80
 8004560:	025b      	lsls	r3, r3, #9
 8004562:	4013      	ands	r3, r2
 8004564:	d108      	bne.n	8004578 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e062      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800456a:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2202      	movs	r2, #2
 8004570:	4013      	ands	r3, r2
 8004572:	d101      	bne.n	8004578 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e05b      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2203      	movs	r2, #3
 800457e:	4393      	bics	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	4b2d      	ldr	r3, [pc, #180]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800458c:	f7fc fdf8 	bl	8001180 <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004594:	e009      	b.n	80045aa <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004596:	f7fc fdf3 	bl	8001180 <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	4a27      	ldr	r2, [pc, #156]	; (8004640 <HAL_RCC_ClockConfig+0x1a4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e042      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045aa:	4b24      	ldr	r3, [pc, #144]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	220c      	movs	r2, #12
 80045b0:	401a      	ands	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d1ec      	bne.n	8004596 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045bc:	4b1e      	ldr	r3, [pc, #120]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d211      	bcs.n	80045ee <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2201      	movs	r2, #1
 80045d0:	4393      	bics	r3, r2
 80045d2:	0019      	movs	r1, r3
 80045d4:	4b18      	ldr	r3, [pc, #96]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045dc:	4b16      	ldr	r3, [pc, #88]	; (8004638 <HAL_RCC_ClockConfig+0x19c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2201      	movs	r2, #1
 80045e2:	4013      	ands	r3, r2
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d001      	beq.n	80045ee <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e020      	b.n	8004630 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2204      	movs	r2, #4
 80045f4:	4013      	ands	r3, r2
 80045f6:	d009      	beq.n	800460c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80045f8:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a11      	ldr	r2, [pc, #68]	; (8004644 <HAL_RCC_ClockConfig+0x1a8>)
 80045fe:	4013      	ands	r3, r2
 8004600:	0019      	movs	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68da      	ldr	r2, [r3, #12]
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 8004608:	430a      	orrs	r2, r1
 800460a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800460c:	f000 f820 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8004610:	0001      	movs	r1, r0
 8004612:	4b0a      	ldr	r3, [pc, #40]	; (800463c <HAL_RCC_ClockConfig+0x1a0>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	220f      	movs	r2, #15
 800461a:	4013      	ands	r3, r2
 800461c:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x1ac>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	000a      	movs	r2, r1
 8004622:	40da      	lsrs	r2, r3
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1b0>)
 8004626:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004628:	2003      	movs	r0, #3
 800462a:	f7fc fd63 	bl	80010f4 <HAL_InitTick>
  
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b004      	add	sp, #16
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40022000 	.word	0x40022000
 800463c:	40021000 	.word	0x40021000
 8004640:	00001388 	.word	0x00001388
 8004644:	fffff8ff 	.word	0xfffff8ff
 8004648:	080054d0 	.word	0x080054d0
 800464c:	20000124 	.word	0x20000124

08004650 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b08f      	sub	sp, #60	; 0x3c
 8004654:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004656:	2314      	movs	r3, #20
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	4a38      	ldr	r2, [pc, #224]	; (800473c <HAL_RCC_GetSysClockFreq+0xec>)
 800465c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800465e:	c313      	stmia	r3!, {r0, r1, r4}
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	4a36      	ldr	r2, [pc, #216]	; (8004740 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004668:	ca13      	ldmia	r2!, {r0, r1, r4}
 800466a:	c313      	stmia	r3!, {r0, r1, r4}
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004674:	2300      	movs	r3, #0
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
 8004678:	2300      	movs	r3, #0
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
 800467c:	2300      	movs	r3, #0
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004684:	4b2f      	ldr	r3, [pc, #188]	; (8004744 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	220c      	movs	r2, #12
 800468e:	4013      	ands	r3, r2
 8004690:	2b0c      	cmp	r3, #12
 8004692:	d047      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0xd4>
 8004694:	d849      	bhi.n	800472a <HAL_RCC_GetSysClockFreq+0xda>
 8004696:	2b04      	cmp	r3, #4
 8004698:	d002      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x50>
 800469a:	2b08      	cmp	r3, #8
 800469c:	d003      	beq.n	80046a6 <HAL_RCC_GetSysClockFreq+0x56>
 800469e:	e044      	b.n	800472a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80046a4:	e044      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	0c9b      	lsrs	r3, r3, #18
 80046aa:	220f      	movs	r2, #15
 80046ac:	4013      	ands	r3, r2
 80046ae:	2214      	movs	r2, #20
 80046b0:	18ba      	adds	r2, r7, r2
 80046b2:	5cd3      	ldrb	r3, [r2, r3]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80046b6:	4b23      	ldr	r3, [pc, #140]	; (8004744 <HAL_RCC_GetSysClockFreq+0xf4>)
 80046b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ba:	220f      	movs	r2, #15
 80046bc:	4013      	ands	r3, r2
 80046be:	1d3a      	adds	r2, r7, #4
 80046c0:	5cd3      	ldrb	r3, [r2, r3]
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046c6:	23c0      	movs	r3, #192	; 0xc0
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	401a      	ands	r2, r3
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	025b      	lsls	r3, r3, #9
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d109      	bne.n	80046e8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046d6:	481c      	ldr	r0, [pc, #112]	; (8004748 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046d8:	f7fb fd16 	bl	8000108 <__udivsi3>
 80046dc:	0003      	movs	r3, r0
 80046de:	001a      	movs	r2, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	4353      	muls	r3, r2
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	e01a      	b.n	800471e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80046e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ea:	23c0      	movs	r3, #192	; 0xc0
 80046ec:	025b      	lsls	r3, r3, #9
 80046ee:	401a      	ands	r2, r3
 80046f0:	23c0      	movs	r3, #192	; 0xc0
 80046f2:	025b      	lsls	r3, r3, #9
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d109      	bne.n	800470c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80046f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046fa:	4814      	ldr	r0, [pc, #80]	; (800474c <HAL_RCC_GetSysClockFreq+0xfc>)
 80046fc:	f7fb fd04 	bl	8000108 <__udivsi3>
 8004700:	0003      	movs	r3, r0
 8004702:	001a      	movs	r2, r3
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	4353      	muls	r3, r2
 8004708:	637b      	str	r3, [r7, #52]	; 0x34
 800470a:	e008      	b.n	800471e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800470c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800470e:	4810      	ldr	r0, [pc, #64]	; (8004750 <HAL_RCC_GetSysClockFreq+0x100>)
 8004710:	f7fb fcfa 	bl	8000108 <__udivsi3>
 8004714:	0003      	movs	r3, r0
 8004716:	001a      	movs	r2, r3
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	4353      	muls	r3, r2
 800471c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004722:	e005      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004726:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004728:	e002      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_GetSysClockFreq+0x100>)
 800472c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800472e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b00f      	add	sp, #60	; 0x3c
 8004738:	bd90      	pop	{r4, r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	080054b0 	.word	0x080054b0
 8004740:	080054c0 	.word	0x080054c0
 8004744:	40021000 	.word	0x40021000
 8004748:	00f42400 	.word	0x00f42400
 800474c:	02dc6c00 	.word	0x02dc6c00
 8004750:	007a1200 	.word	0x007a1200

08004754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <HAL_RCC_GetHCLKFreq+0x10>)
 800475a:	681b      	ldr	r3, [r3, #0]
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	46c0      	nop			; (mov r8, r8)
 8004764:	20000124 	.word	0x20000124

08004768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800476c:	f7ff fff2 	bl	8004754 <HAL_RCC_GetHCLKFreq>
 8004770:	0001      	movs	r1, r0
 8004772:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	0a1b      	lsrs	r3, r3, #8
 8004778:	2207      	movs	r2, #7
 800477a:	4013      	ands	r3, r2
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800477e:	5cd3      	ldrb	r3, [r2, r3]
 8004780:	40d9      	lsrs	r1, r3
 8004782:	000b      	movs	r3, r1
}    
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	46c0      	nop			; (mov r8, r8)
 800478c:	40021000 	.word	0x40021000
 8004790:	080054e0 	.word	0x080054e0

08004794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b086      	sub	sp, #24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	025b      	lsls	r3, r3, #9
 80047ac:	4013      	ands	r3, r2
 80047ae:	d100      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80047b0:	e08e      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80047b2:	2017      	movs	r0, #23
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	2200      	movs	r2, #0
 80047b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ba:	4b67      	ldr	r3, [pc, #412]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047bc:	69da      	ldr	r2, [r3, #28]
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	055b      	lsls	r3, r3, #21
 80047c2:	4013      	ands	r3, r2
 80047c4:	d110      	bne.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	4b64      	ldr	r3, [pc, #400]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047cc:	2180      	movs	r1, #128	; 0x80
 80047ce:	0549      	lsls	r1, r1, #21
 80047d0:	430a      	orrs	r2, r1
 80047d2:	61da      	str	r2, [r3, #28]
 80047d4:	4b60      	ldr	r3, [pc, #384]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	2380      	movs	r3, #128	; 0x80
 80047da:	055b      	lsls	r3, r3, #21
 80047dc:	4013      	ands	r3, r2
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e2:	183b      	adds	r3, r7, r0
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e8:	4b5c      	ldr	r3, [pc, #368]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	4013      	ands	r3, r2
 80047f2:	d11a      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f4:	4b59      	ldr	r3, [pc, #356]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	4b58      	ldr	r3, [pc, #352]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047fa:	2180      	movs	r1, #128	; 0x80
 80047fc:	0049      	lsls	r1, r1, #1
 80047fe:	430a      	orrs	r2, r1
 8004800:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004802:	f7fc fcbd 	bl	8001180 <HAL_GetTick>
 8004806:	0003      	movs	r3, r0
 8004808:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	e008      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800480c:	f7fc fcb8 	bl	8001180 <HAL_GetTick>
 8004810:	0002      	movs	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b64      	cmp	r3, #100	; 0x64
 8004818:	d901      	bls.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e097      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800481e:	4b4f      	ldr	r3, [pc, #316]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	2380      	movs	r3, #128	; 0x80
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	4013      	ands	r3, r2
 8004828:	d0f0      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800482a:	4b4b      	ldr	r3, [pc, #300]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	23c0      	movs	r3, #192	; 0xc0
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4013      	ands	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d034      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	23c0      	movs	r3, #192	; 0xc0
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4013      	ands	r3, r2
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	429a      	cmp	r2, r3
 800484a:	d02c      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800484c:	4b42      	ldr	r3, [pc, #264]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	4a43      	ldr	r2, [pc, #268]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004852:	4013      	ands	r3, r2
 8004854:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004858:	6a1a      	ldr	r2, [r3, #32]
 800485a:	4b3f      	ldr	r3, [pc, #252]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800485c:	2180      	movs	r1, #128	; 0x80
 800485e:	0249      	lsls	r1, r1, #9
 8004860:	430a      	orrs	r2, r1
 8004862:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004864:	4b3c      	ldr	r3, [pc, #240]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004866:	6a1a      	ldr	r2, [r3, #32]
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800486a:	493e      	ldr	r1, [pc, #248]	; (8004964 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486c:	400a      	ands	r2, r1
 800486e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2201      	movs	r2, #1
 800487a:	4013      	ands	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487e:	f7fc fc7f 	bl	8001180 <HAL_GetTick>
 8004882:	0003      	movs	r3, r0
 8004884:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	e009      	b.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fc fc7a 	bl	8001180 <HAL_GetTick>
 800488c:	0002      	movs	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	4a35      	ldr	r2, [pc, #212]	; (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e058      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	2202      	movs	r2, #2
 80048a2:	4013      	ands	r3, r2
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a6:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a2d      	ldr	r2, [pc, #180]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	0019      	movs	r1, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048b6:	430a      	orrs	r2, r1
 80048b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048ba:	2317      	movs	r3, #23
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d105      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048c6:	69da      	ldr	r2, [r3, #28]
 80048c8:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048ca:	4928      	ldr	r1, [pc, #160]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048cc:	400a      	ands	r2, r1
 80048ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2201      	movs	r2, #1
 80048d6:	4013      	ands	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048da:	4b1f      	ldr	r3, [pc, #124]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	2203      	movs	r2, #3
 80048e0:	4393      	bics	r3, r2
 80048e2:	0019      	movs	r1, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048ea:	430a      	orrs	r2, r1
 80048ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2220      	movs	r2, #32
 80048f4:	4013      	ands	r3, r2
 80048f6:	d009      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f8:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	2210      	movs	r2, #16
 80048fe:	4393      	bics	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004908:	430a      	orrs	r2, r1
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	029b      	lsls	r3, r3, #10
 8004914:	4013      	ands	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	4393      	bics	r3, r2
 8004920:	0019      	movs	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004928:	430a      	orrs	r2, r1
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	2380      	movs	r3, #128	; 0x80
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4013      	ands	r3, r2
 8004936:	d009      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2240      	movs	r2, #64	; 0x40
 800493e:	4393      	bics	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	4b04      	ldr	r3, [pc, #16]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8004948:	430a      	orrs	r2, r1
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	0018      	movs	r0, r3
 8004950:	46bd      	mov	sp, r7
 8004952:	b006      	add	sp, #24
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	40021000 	.word	0x40021000
 800495c:	40007000 	.word	0x40007000
 8004960:	fffffcff 	.word	0xfffffcff
 8004964:	fffeffff 	.word	0xfffeffff
 8004968:	00001388 	.word	0x00001388
 800496c:	efffffff 	.word	0xefffffff

08004970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e042      	b.n	8004a08 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	223d      	movs	r2, #61	; 0x3d
 8004986:	5c9b      	ldrb	r3, [r3, r2]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d107      	bne.n	800499e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	223c      	movs	r2, #60	; 0x3c
 8004992:	2100      	movs	r1, #0
 8004994:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f7fc faaf 	bl	8000efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	223d      	movs	r2, #61	; 0x3d
 80049a2:	2102      	movs	r1, #2
 80049a4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3304      	adds	r3, #4
 80049ae:	0019      	movs	r1, r3
 80049b0:	0010      	movs	r0, r2
 80049b2:	f000 f96b 	bl	8004c8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2246      	movs	r2, #70	; 0x46
 80049ba:	2101      	movs	r1, #1
 80049bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	223e      	movs	r2, #62	; 0x3e
 80049c2:	2101      	movs	r1, #1
 80049c4:	5499      	strb	r1, [r3, r2]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223f      	movs	r2, #63	; 0x3f
 80049ca:	2101      	movs	r1, #1
 80049cc:	5499      	strb	r1, [r3, r2]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2240      	movs	r2, #64	; 0x40
 80049d2:	2101      	movs	r1, #1
 80049d4:	5499      	strb	r1, [r3, r2]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2241      	movs	r2, #65	; 0x41
 80049da:	2101      	movs	r1, #1
 80049dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2242      	movs	r2, #66	; 0x42
 80049e2:	2101      	movs	r1, #1
 80049e4:	5499      	strb	r1, [r3, r2]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2243      	movs	r2, #67	; 0x43
 80049ea:	2101      	movs	r1, #1
 80049ec:	5499      	strb	r1, [r3, r2]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2244      	movs	r2, #68	; 0x44
 80049f2:	2101      	movs	r1, #1
 80049f4:	5499      	strb	r1, [r3, r2]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2245      	movs	r2, #69	; 0x45
 80049fa:	2101      	movs	r1, #1
 80049fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223d      	movs	r2, #61	; 0x3d
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	0018      	movs	r0, r3
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2202      	movs	r2, #2
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d124      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d11d      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	4252      	negs	r2, r2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2203      	movs	r2, #3
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f000 f902 	bl	8004c5c <HAL_TIM_IC_CaptureCallback>
 8004a58:	e007      	b.n	8004a6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f000 f8f5 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	0018      	movs	r0, r3
 8004a66:	f000 f901 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2204      	movs	r2, #4
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d125      	bne.n	8004aca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2204      	movs	r2, #4
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b04      	cmp	r3, #4
 8004a8a:	d11e      	bne.n	8004aca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2205      	movs	r2, #5
 8004a92:	4252      	negs	r2, r2
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	23c0      	movs	r3, #192	; 0xc0
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 f8d5 	bl	8004c5c <HAL_TIM_IC_CaptureCallback>
 8004ab2:	e007      	b.n	8004ac4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 f8c8 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f000 f8d4 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d124      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	2208      	movs	r2, #8
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d11d      	bne.n	8004b22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2209      	movs	r2, #9
 8004aec:	4252      	negs	r2, r2
 8004aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2204      	movs	r2, #4
 8004af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2203      	movs	r2, #3
 8004afe:	4013      	ands	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	0018      	movs	r0, r3
 8004b06:	f000 f8a9 	bl	8004c5c <HAL_TIM_IC_CaptureCallback>
 8004b0a:	e007      	b.n	8004b1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f000 f89c 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	0018      	movs	r0, r3
 8004b18:	f000 f8a8 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	2210      	movs	r2, #16
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d125      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2210      	movs	r2, #16
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d11e      	bne.n	8004b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2211      	movs	r2, #17
 8004b44:	4252      	negs	r2, r2
 8004b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	23c0      	movs	r3, #192	; 0xc0
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	0018      	movs	r0, r3
 8004b60:	f000 f87c 	bl	8004c5c <HAL_TIM_IC_CaptureCallback>
 8004b64:	e007      	b.n	8004b76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 f86f 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	0018      	movs	r0, r3
 8004b72:	f000 f87b 	bl	8004c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2201      	movs	r2, #1
 8004b84:	4013      	ands	r3, r2
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d10f      	bne.n	8004baa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2201      	movs	r2, #1
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d108      	bne.n	8004baa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	4252      	negs	r2, r2
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	0018      	movs	r0, r3
 8004ba6:	f000 f849 	bl	8004c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	2280      	movs	r2, #128	; 0x80
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d10f      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b80      	cmp	r3, #128	; 0x80
 8004bc4:	d108      	bne.n	8004bd8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2281      	movs	r2, #129	; 0x81
 8004bcc:	4252      	negs	r2, r2
 8004bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	f000 f8d8 	bl	8004d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2240      	movs	r2, #64	; 0x40
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b40      	cmp	r3, #64	; 0x40
 8004be4:	d10f      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2240      	movs	r2, #64	; 0x40
 8004bee:	4013      	ands	r3, r2
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d108      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2241      	movs	r2, #65	; 0x41
 8004bfa:	4252      	negs	r2, r2
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	0018      	movs	r0, r3
 8004c02:	f000 f83b 	bl	8004c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d10f      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d108      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2221      	movs	r2, #33	; 0x21
 8004c28:	4252      	negs	r2, r2
 8004c2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 f8a2 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	b002      	add	sp, #8
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c54:	46c0      	nop			; (mov r8, r8)
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b002      	add	sp, #8
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c64:	46c0      	nop			; (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	b002      	add	sp, #8
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c74:	46c0      	nop			; (mov r8, r8)
 8004c76:	46bd      	mov	sp, r7
 8004c78:	b002      	add	sp, #8
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c84:	46c0      	nop			; (mov r8, r8)
 8004c86:	46bd      	mov	sp, r7
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a30      	ldr	r2, [pc, #192]	; (8004d60 <TIM_Base_SetConfig+0xd4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d008      	beq.n	8004cb6 <TIM_Base_SetConfig+0x2a>
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	05db      	lsls	r3, r3, #23
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0x2a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <TIM_Base_SetConfig+0xd8>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2270      	movs	r2, #112	; 0x70
 8004cba:	4393      	bics	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <TIM_Base_SetConfig+0xd4>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d014      	beq.n	8004cfa <TIM_Base_SetConfig+0x6e>
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	05db      	lsls	r3, r3, #23
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d00f      	beq.n	8004cfa <TIM_Base_SetConfig+0x6e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <TIM_Base_SetConfig+0xd8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_Base_SetConfig+0x6e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <TIM_Base_SetConfig+0xdc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_Base_SetConfig+0x6e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1f      	ldr	r2, [pc, #124]	; (8004d6c <TIM_Base_SetConfig+0xe0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_Base_SetConfig+0x6e>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <TIM_Base_SetConfig+0xe4>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d108      	bne.n	8004d0c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <TIM_Base_SetConfig+0xe8>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	4393      	bics	r3, r2
 8004d12:	001a      	movs	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	695b      	ldr	r3, [r3, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <TIM_Base_SetConfig+0xd4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d007      	beq.n	8004d4a <TIM_Base_SetConfig+0xbe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a0b      	ldr	r2, [pc, #44]	; (8004d6c <TIM_Base_SetConfig+0xe0>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d003      	beq.n	8004d4a <TIM_Base_SetConfig+0xbe>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a0a      	ldr	r2, [pc, #40]	; (8004d70 <TIM_Base_SetConfig+0xe4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d103      	bne.n	8004d52 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	615a      	str	r2, [r3, #20]
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b004      	add	sp, #16
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40000400 	.word	0x40000400
 8004d68:	40002000 	.word	0x40002000
 8004d6c:	40014400 	.word	0x40014400
 8004d70:	40014800 	.word	0x40014800
 8004d74:	fffffcff 	.word	0xfffffcff

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	46c0      	nop			; (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b002      	add	sp, #8
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d90:	46c0      	nop			; (mov r8, r8)
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d101      	bne.n	8004daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e044      	b.n	8004e34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d107      	bne.n	8004dc2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2274      	movs	r2, #116	; 0x74
 8004db6:	2100      	movs	r1, #0
 8004db8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7fc f8f5 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2224      	movs	r2, #36	; 0x24
 8004dc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	438a      	bics	r2, r1
 8004dd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 f830 	bl	8004e40 <UART_SetConfig>
 8004de0:	0003      	movs	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e024      	b.n	8004e34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	0018      	movs	r0, r3
 8004df6:	f000 f963 	bl	80050c0 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	490d      	ldr	r1, [pc, #52]	; (8004e3c <HAL_UART_Init+0xa4>)
 8004e06:	400a      	ands	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	212a      	movs	r1, #42	; 0x2a
 8004e16:	438a      	bics	r2, r1
 8004e18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2101      	movs	r1, #1
 8004e26:	430a      	orrs	r2, r1
 8004e28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	f000 f9fb 	bl	8005228 <UART_CheckIdleState>
 8004e32:	0003      	movs	r3, r0
}
 8004e34:	0018      	movs	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	b002      	add	sp, #8
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	ffffb7ff 	.word	0xffffb7ff

08004e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e48:	231e      	movs	r3, #30
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a8d      	ldr	r2, [pc, #564]	; (80050a4 <UART_SetConfig+0x264>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	4a88      	ldr	r2, [pc, #544]	; (80050a8 <UART_SetConfig+0x268>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	0019      	movs	r1, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	4a7f      	ldr	r2, [pc, #508]	; (80050ac <UART_SetConfig+0x26c>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a7b      	ldr	r2, [pc, #492]	; (80050b0 <UART_SetConfig+0x270>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d127      	bne.n	8004f16 <UART_SetConfig+0xd6>
 8004ec6:	4b7b      	ldr	r3, [pc, #492]	; (80050b4 <UART_SetConfig+0x274>)
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eca:	2203      	movs	r2, #3
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b03      	cmp	r3, #3
 8004ed0:	d00d      	beq.n	8004eee <UART_SetConfig+0xae>
 8004ed2:	d81b      	bhi.n	8004f0c <UART_SetConfig+0xcc>
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d014      	beq.n	8004f02 <UART_SetConfig+0xc2>
 8004ed8:	d818      	bhi.n	8004f0c <UART_SetConfig+0xcc>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <UART_SetConfig+0xa4>
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d00a      	beq.n	8004ef8 <UART_SetConfig+0xb8>
 8004ee2:	e013      	b.n	8004f0c <UART_SetConfig+0xcc>
 8004ee4:	231f      	movs	r3, #31
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	e021      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004eee:	231f      	movs	r3, #31
 8004ef0:	18fb      	adds	r3, r7, r3
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e01c      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004ef8:	231f      	movs	r3, #31
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	2204      	movs	r2, #4
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e017      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f02:	231f      	movs	r3, #31
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2208      	movs	r2, #8
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e012      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f0c:	231f      	movs	r3, #31
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2210      	movs	r2, #16
 8004f12:	701a      	strb	r2, [r3, #0]
 8004f14:	e00d      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a67      	ldr	r2, [pc, #412]	; (80050b8 <UART_SetConfig+0x278>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d104      	bne.n	8004f2a <UART_SetConfig+0xea>
 8004f20:	231f      	movs	r3, #31
 8004f22:	18fb      	adds	r3, r7, r3
 8004f24:	2200      	movs	r2, #0
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e003      	b.n	8004f32 <UART_SetConfig+0xf2>
 8004f2a:	231f      	movs	r3, #31
 8004f2c:	18fb      	adds	r3, r7, r3
 8004f2e:	2210      	movs	r2, #16
 8004f30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	69da      	ldr	r2, [r3, #28]
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d15d      	bne.n	8004ffa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8004f3e:	231f      	movs	r3, #31
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d015      	beq.n	8004f74 <UART_SetConfig+0x134>
 8004f48:	dc18      	bgt.n	8004f7c <UART_SetConfig+0x13c>
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d00d      	beq.n	8004f6a <UART_SetConfig+0x12a>
 8004f4e:	dc15      	bgt.n	8004f7c <UART_SetConfig+0x13c>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <UART_SetConfig+0x11a>
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d005      	beq.n	8004f64 <UART_SetConfig+0x124>
 8004f58:	e010      	b.n	8004f7c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5a:	f7ff fc05 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	61bb      	str	r3, [r7, #24]
        break;
 8004f62:	e012      	b.n	8004f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f64:	4b55      	ldr	r3, [pc, #340]	; (80050bc <UART_SetConfig+0x27c>)
 8004f66:	61bb      	str	r3, [r7, #24]
        break;
 8004f68:	e00f      	b.n	8004f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6a:	f7ff fb71 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 8004f6e:	0003      	movs	r3, r0
 8004f70:	61bb      	str	r3, [r7, #24]
        break;
 8004f72:	e00a      	b.n	8004f8a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	021b      	lsls	r3, r3, #8
 8004f78:	61bb      	str	r3, [r7, #24]
        break;
 8004f7a:	e006      	b.n	8004f8a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f80:	231e      	movs	r3, #30
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
        break;
 8004f88:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d100      	bne.n	8004f92 <UART_SetConfig+0x152>
 8004f90:	e07b      	b.n	800508a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	005a      	lsls	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	18d2      	adds	r2, r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	0010      	movs	r0, r2
 8004fa6:	f7fb f8af 	bl	8000108 <__udivsi3>
 8004faa:	0003      	movs	r3, r0
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	2b0f      	cmp	r3, #15
 8004fb4:	d91c      	bls.n	8004ff0 <UART_SetConfig+0x1b0>
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	025b      	lsls	r3, r3, #9
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d217      	bcs.n	8004ff0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	200e      	movs	r0, #14
 8004fc6:	183b      	adds	r3, r7, r0
 8004fc8:	210f      	movs	r1, #15
 8004fca:	438a      	bics	r2, r1
 8004fcc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2207      	movs	r2, #7
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	b299      	uxth	r1, r3
 8004fda:	183b      	adds	r3, r7, r0
 8004fdc:	183a      	adds	r2, r7, r0
 8004fde:	8812      	ldrh	r2, [r2, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	183a      	adds	r2, r7, r0
 8004fea:	8812      	ldrh	r2, [r2, #0]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	e04c      	b.n	800508a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff0:	231e      	movs	r3, #30
 8004ff2:	18fb      	adds	r3, r7, r3
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e047      	b.n	800508a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ffa:	231f      	movs	r3, #31
 8004ffc:	18fb      	adds	r3, r7, r3
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b08      	cmp	r3, #8
 8005002:	d015      	beq.n	8005030 <UART_SetConfig+0x1f0>
 8005004:	dc18      	bgt.n	8005038 <UART_SetConfig+0x1f8>
 8005006:	2b04      	cmp	r3, #4
 8005008:	d00d      	beq.n	8005026 <UART_SetConfig+0x1e6>
 800500a:	dc15      	bgt.n	8005038 <UART_SetConfig+0x1f8>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <UART_SetConfig+0x1d6>
 8005010:	2b02      	cmp	r3, #2
 8005012:	d005      	beq.n	8005020 <UART_SetConfig+0x1e0>
 8005014:	e010      	b.n	8005038 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005016:	f7ff fba7 	bl	8004768 <HAL_RCC_GetPCLK1Freq>
 800501a:	0003      	movs	r3, r0
 800501c:	61bb      	str	r3, [r7, #24]
        break;
 800501e:	e012      	b.n	8005046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005020:	4b26      	ldr	r3, [pc, #152]	; (80050bc <UART_SetConfig+0x27c>)
 8005022:	61bb      	str	r3, [r7, #24]
        break;
 8005024:	e00f      	b.n	8005046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005026:	f7ff fb13 	bl	8004650 <HAL_RCC_GetSysClockFreq>
 800502a:	0003      	movs	r3, r0
 800502c:	61bb      	str	r3, [r7, #24]
        break;
 800502e:	e00a      	b.n	8005046 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005030:	2380      	movs	r3, #128	; 0x80
 8005032:	021b      	lsls	r3, r3, #8
 8005034:	61bb      	str	r3, [r7, #24]
        break;
 8005036:	e006      	b.n	8005046 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800503c:	231e      	movs	r3, #30
 800503e:	18fb      	adds	r3, r7, r3
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]
        break;
 8005044:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01e      	beq.n	800508a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	085a      	lsrs	r2, r3, #1
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	18d2      	adds	r2, r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	0019      	movs	r1, r3
 800505c:	0010      	movs	r0, r2
 800505e:	f7fb f853 	bl	8000108 <__udivsi3>
 8005062:	0003      	movs	r3, r0
 8005064:	b29b      	uxth	r3, r3
 8005066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d909      	bls.n	8005082 <UART_SetConfig+0x242>
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	025b      	lsls	r3, r3, #9
 8005074:	429a      	cmp	r2, r3
 8005076:	d204      	bcs.n	8005082 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e003      	b.n	800508a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8005082:	231e      	movs	r3, #30
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005096:	231e      	movs	r3, #30
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	781b      	ldrb	r3, [r3, #0]
}
 800509c:	0018      	movs	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	b008      	add	sp, #32
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	efff69f3 	.word	0xefff69f3
 80050a8:	ffffcfff 	.word	0xffffcfff
 80050ac:	fffff4ff 	.word	0xfffff4ff
 80050b0:	40013800 	.word	0x40013800
 80050b4:	40021000 	.word	0x40021000
 80050b8:	40004400 	.word	0x40004400
 80050bc:	007a1200 	.word	0x007a1200

080050c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2201      	movs	r2, #1
 80050ce:	4013      	ands	r3, r2
 80050d0:	d00b      	beq.n	80050ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a4a      	ldr	r2, [pc, #296]	; (8005204 <UART_AdvFeatureConfig+0x144>)
 80050da:	4013      	ands	r3, r2
 80050dc:	0019      	movs	r1, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	2202      	movs	r2, #2
 80050f0:	4013      	ands	r3, r2
 80050f2:	d00b      	beq.n	800510c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	4a43      	ldr	r2, [pc, #268]	; (8005208 <UART_AdvFeatureConfig+0x148>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	0019      	movs	r1, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2204      	movs	r2, #4
 8005112:	4013      	ands	r3, r2
 8005114:	d00b      	beq.n	800512e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a3b      	ldr	r2, [pc, #236]	; (800520c <UART_AdvFeatureConfig+0x14c>)
 800511e:	4013      	ands	r3, r2
 8005120:	0019      	movs	r1, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2208      	movs	r2, #8
 8005134:	4013      	ands	r3, r2
 8005136:	d00b      	beq.n	8005150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4a34      	ldr	r2, [pc, #208]	; (8005210 <UART_AdvFeatureConfig+0x150>)
 8005140:	4013      	ands	r3, r2
 8005142:	0019      	movs	r1, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	2210      	movs	r2, #16
 8005156:	4013      	ands	r3, r2
 8005158:	d00b      	beq.n	8005172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <UART_AdvFeatureConfig+0x154>)
 8005162:	4013      	ands	r3, r2
 8005164:	0019      	movs	r1, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2220      	movs	r2, #32
 8005178:	4013      	ands	r3, r2
 800517a:	d00b      	beq.n	8005194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	4a25      	ldr	r2, [pc, #148]	; (8005218 <UART_AdvFeatureConfig+0x158>)
 8005184:	4013      	ands	r3, r2
 8005186:	0019      	movs	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005198:	2240      	movs	r2, #64	; 0x40
 800519a:	4013      	ands	r3, r2
 800519c:	d01d      	beq.n	80051da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <UART_AdvFeatureConfig+0x15c>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	0019      	movs	r1, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ba:	2380      	movs	r3, #128	; 0x80
 80051bc:	035b      	lsls	r3, r3, #13
 80051be:	429a      	cmp	r2, r3
 80051c0:	d10b      	bne.n	80051da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4a15      	ldr	r2, [pc, #84]	; (8005220 <UART_AdvFeatureConfig+0x160>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	0019      	movs	r1, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2280      	movs	r2, #128	; 0x80
 80051e0:	4013      	ands	r3, r2
 80051e2:	d00b      	beq.n	80051fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <UART_AdvFeatureConfig+0x164>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	0019      	movs	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]
  }
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	b002      	add	sp, #8
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fffdffff 	.word	0xfffdffff
 8005208:	fffeffff 	.word	0xfffeffff
 800520c:	fffbffff 	.word	0xfffbffff
 8005210:	ffff7fff 	.word	0xffff7fff
 8005214:	ffffefff 	.word	0xffffefff
 8005218:	ffffdfff 	.word	0xffffdfff
 800521c:	ffefffff 	.word	0xffefffff
 8005220:	ff9fffff 	.word	0xff9fffff
 8005224:	fff7ffff 	.word	0xfff7ffff

08005228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	2100      	movs	r1, #0
 8005236:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005238:	f7fb ffa2 	bl	8001180 <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2208      	movs	r2, #8
 8005248:	4013      	ands	r3, r2
 800524a:	2b08      	cmp	r3, #8
 800524c:	d10c      	bne.n	8005268 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2280      	movs	r2, #128	; 0x80
 8005252:	0391      	lsls	r1, r2, #14
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <UART_CheckIdleState+0x8c>)
 8005258:	9200      	str	r2, [sp, #0]
 800525a:	2200      	movs	r2, #0
 800525c:	f000 f82c 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d001      	beq.n	8005268 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e021      	b.n	80052ac <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2204      	movs	r2, #4
 8005270:	4013      	ands	r3, r2
 8005272:	2b04      	cmp	r3, #4
 8005274:	d10c      	bne.n	8005290 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	03d1      	lsls	r1, r2, #15
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	4a0d      	ldr	r2, [pc, #52]	; (80052b4 <UART_CheckIdleState+0x8c>)
 8005280:	9200      	str	r2, [sp, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	f000 f818 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8005288:	1e03      	subs	r3, r0, #0
 800528a:	d001      	beq.n	8005290 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e00d      	b.n	80052ac <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2274      	movs	r2, #116	; 0x74
 80052a6:	2100      	movs	r1, #0
 80052a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	0018      	movs	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b004      	add	sp, #16
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	01ffffff 	.word	0x01ffffff

080052b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b094      	sub	sp, #80	; 0x50
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	1dfb      	adds	r3, r7, #7
 80052c6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	e0a3      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052cc:	3301      	adds	r3, #1
 80052ce:	d100      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80052d0:	e09f      	b.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052d2:	f7fb ff55 	bl	8001180 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052de:	429a      	cmp	r2, r3
 80052e0:	d302      	bcc.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d13d      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052f0:	647b      	str	r3, [r7, #68]	; 0x44
 80052f2:	2301      	movs	r3, #1
 80052f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	494c      	ldr	r1, [pc, #304]	; (800543c <UART_WaitOnFlagUntilTimeout+0x184>)
 800530a:	400a      	ands	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800531a:	f3ef 8310 	mrs	r3, PRIMASK
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
 8005324:	2301      	movs	r3, #1
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532a:	f383 8810 	msr	PRIMASK, r3
}
 800532e:	46c0      	nop			; (mov r8, r8)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689a      	ldr	r2, [r3, #8]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2101      	movs	r1, #1
 800533c:	438a      	bics	r2, r1
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2220      	movs	r2, #32
 8005356:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2274      	movs	r2, #116	; 0x74
 800535c:	2100      	movs	r1, #0
 800535e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e067      	b.n	8005434 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2204      	movs	r2, #4
 800536c:	4013      	ands	r3, r2
 800536e:	d050      	beq.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	011b      	lsls	r3, r3, #4
 800537a:	401a      	ands	r2, r3
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	429a      	cmp	r2, r3
 8005382:	d146      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2280      	movs	r2, #128	; 0x80
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	613b      	str	r3, [r7, #16]
  return(result);
 8005394:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4923      	ldr	r1, [pc, #140]	; (800543c <UART_WaitOnFlagUntilTimeout+0x184>)
 80053b0:	400a      	ands	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
 80053b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c0:	f3ef 8310 	mrs	r3, PRIMASK
 80053c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80053c6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ca:	2301      	movs	r3, #1
 80053cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f383 8810 	msr	PRIMASK, r3
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2101      	movs	r1, #1
 80053e2:	438a      	bics	r2, r1
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2220      	movs	r2, #32
 80053f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	2120      	movs	r1, #32
 8005404:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2274      	movs	r2, #116	; 0x74
 800540a:	2100      	movs	r1, #0
 800540c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e010      	b.n	8005434 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69db      	ldr	r3, [r3, #28]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	4013      	ands	r3, r2
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	425a      	negs	r2, r3
 8005422:	4153      	adcs	r3, r2
 8005424:	b2db      	uxtb	r3, r3
 8005426:	001a      	movs	r2, r3
 8005428:	1dfb      	adds	r3, r7, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d100      	bne.n	8005432 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005430:	e74b      	b.n	80052ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	0018      	movs	r0, r3
 8005436:	46bd      	mov	sp, r7
 8005438:	b014      	add	sp, #80	; 0x50
 800543a:	bd80      	pop	{r7, pc}
 800543c:	fffffe5f 	.word	0xfffffe5f

08005440 <__libc_init_array>:
 8005440:	b570      	push	{r4, r5, r6, lr}
 8005442:	2600      	movs	r6, #0
 8005444:	4d0c      	ldr	r5, [pc, #48]	; (8005478 <__libc_init_array+0x38>)
 8005446:	4c0d      	ldr	r4, [pc, #52]	; (800547c <__libc_init_array+0x3c>)
 8005448:	1b64      	subs	r4, r4, r5
 800544a:	10a4      	asrs	r4, r4, #2
 800544c:	42a6      	cmp	r6, r4
 800544e:	d109      	bne.n	8005464 <__libc_init_array+0x24>
 8005450:	2600      	movs	r6, #0
 8005452:	f000 f821 	bl	8005498 <_init>
 8005456:	4d0a      	ldr	r5, [pc, #40]	; (8005480 <__libc_init_array+0x40>)
 8005458:	4c0a      	ldr	r4, [pc, #40]	; (8005484 <__libc_init_array+0x44>)
 800545a:	1b64      	subs	r4, r4, r5
 800545c:	10a4      	asrs	r4, r4, #2
 800545e:	42a6      	cmp	r6, r4
 8005460:	d105      	bne.n	800546e <__libc_init_array+0x2e>
 8005462:	bd70      	pop	{r4, r5, r6, pc}
 8005464:	00b3      	lsls	r3, r6, #2
 8005466:	58eb      	ldr	r3, [r5, r3]
 8005468:	4798      	blx	r3
 800546a:	3601      	adds	r6, #1
 800546c:	e7ee      	b.n	800544c <__libc_init_array+0xc>
 800546e:	00b3      	lsls	r3, r6, #2
 8005470:	58eb      	ldr	r3, [r5, r3]
 8005472:	4798      	blx	r3
 8005474:	3601      	adds	r6, #1
 8005476:	e7f2      	b.n	800545e <__libc_init_array+0x1e>
 8005478:	080054e8 	.word	0x080054e8
 800547c:	080054e8 	.word	0x080054e8
 8005480:	080054e8 	.word	0x080054e8
 8005484:	080054ec 	.word	0x080054ec

08005488 <memset>:
 8005488:	0003      	movs	r3, r0
 800548a:	1882      	adds	r2, r0, r2
 800548c:	4293      	cmp	r3, r2
 800548e:	d100      	bne.n	8005492 <memset+0xa>
 8005490:	4770      	bx	lr
 8005492:	7019      	strb	r1, [r3, #0]
 8005494:	3301      	adds	r3, #1
 8005496:	e7f9      	b.n	800548c <memset+0x4>

08005498 <_init>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr

080054a4 <_fini>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	46c0      	nop			; (mov r8, r8)
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr
